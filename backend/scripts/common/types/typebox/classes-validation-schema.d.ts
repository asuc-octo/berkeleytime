/**
 * ATTENTION. This code was AUTO GENERATED by ts2typebox. While I don't know
 * your use case, there is a high chance that direct changes to this file get
 * lost. Consider making changes to the underlying Typescript code you use to
 * generate this file instead. The default file is called "types.ts", perhaps
 * have a look there! :]
 */

import { Type, Static } from "@sinclair/typebox";

export type paths = Static<typeof paths>;
export const paths = Type.Object({
  "/v1/classes": Type.Object({
    get: Type.Index(operations, Type.Literal("getClassesUsingGET")),
  }),
  "/v1/classes/descriptors": Type.Object({
    get: Type.Index(operations, Type.Literal("getClassDescriptorsUsingGET")),
  }),
  "/v1/classes/sections": Type.Object({
    get: Type.Index(operations, Type.Literal("getClassSectionsUsingGET")),
  }),
  "/v1/classes/sections/{class-section-id}": Type.Object({
    get: Type.Index(
      operations,
      Type.Literal("getClassSectionByTermAndSectionIdUsingGET")
    ),
  }),
  "/v1/classes/sections/{class-section-id}/term/{term-id}/enrollment":
    Type.Object({
      get: Type.Index(
        operations,
        Type.Literal("getClassSectionEnrollmentInformationUsingGET")
      ),
    }),
  "/v1/classes/sections/terms/{term-id}/updated/enrollments": Type.Object({
    get: Type.Index(
      operations,
      Type.Literal("getClassEnrollmentInformationUsingGET")
    ),
  }),
  "/v1/classes/sections/descriptors": Type.Object({
    get: Type.Index(
      operations,
      Type.Literal("getClassSectionDescriptorsUsingGET")
    ),
  }),
});

export type definitions = Static<typeof definitions>;
export const definitions = Type.Recursive((This) =>
  Type.Object({
    classPayload: Type.Object({
      apiResponse: Type.Optional(
        Type.Index(definitions, Type.Literal("classResponse"))
      ),
    }),
    classResponse: Type.Intersect([
      Type.Index(definitions, Type.Literal("apiResponse")),
      Type.Object({
        responseType: Type.Optional(Type.String()),
        response: Type.Optional(
          Type.Object({
            classes: Type.Optional(
              Type.Array(Type.Index(definitions, Type.Literal("class")))
            ),
          })
        ),
      }),
      Type.Object({
        httpStatus: Type.Unknown(),
        response: Type.Unknown(),
      }),
    ]),
    classSectionPayload: Type.Object({
      apiResponse: Type.Optional(
        Type.Index(definitions, Type.Literal("classSectionResponse"))
      ),
    }),
    classSectionResponse: Type.Intersect([
      Type.Index(definitions, Type.Literal("apiResponse")),
      Type.Object({
        responseType: Type.Optional(Type.String()),
        response: Type.Optional(
          Type.Object({
            classSections: Type.Optional(
              Type.Array(Type.Index(definitions, Type.Literal("classSection")))
            ),
          })
        ),
      }),
      Type.Object({
        httpStatus: Type.Unknown(),
        response: Type.Unknown(),
      }),
    ]),
    classSectionEnrollmentPayload: Type.Object({
      apiResponse: Type.Optional(
        Type.Index(definitions, Type.Literal("classSectionEnrollmentResponse"))
      ),
    }),
    classSectionEnrollmentResponse: Type.Intersect([
      Type.Index(definitions, Type.Literal("apiResponse")),
      Type.Object({
        responseType: Type.Optional(Type.String()),
        response: Type.Optional(
          Type.Object({
            classSections: Type.Optional(
              Type.Array(
                Type.Index(definitions, Type.Literal("classSectionEnrollment"))
              )
            ),
          })
        ),
      }),
      Type.Object({
        httpStatus: Type.Unknown(),
        response: Type.Unknown(),
      }),
    ]),
    descriptorPayload: Type.Object({
      apiResponse: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptorResponse"))
      ),
    }),
    descriptorResponse: Type.Intersect([
      Type.Index(definitions, Type.Literal("apiResponse")),
      Type.Object({
        responseType: Type.Optional(Type.String()),
        response: Type.Optional(
          Type.Object({
            fieldValueLists: Type.Optional(
              Type.Array(
                Type.Index(definitions, Type.Literal("fieldValueList"))
              )
            ),
          })
        ),
      }),
      Type.Object({
        httpStatus: Type.Unknown(),
        response: Type.Unknown(),
      }),
    ]),
    errorPayload: Type.Object({
      apiResponse: Type.Optional(
        Type.Index(definitions, Type.Literal("apiResponse"))
      ),
    }),
    apiResponse: Type.Object({
      source: Type.Optional(Type.String()),
      correlationId: Type.Optional(Type.String()),
      timeStamp: Type.Optional(Type.String()),
      cursor: Type.Optional(Type.Index(definitions, Type.Literal("cursor"))),
      httpStatus: Type.Index(definitions, Type.Literal("descriptor")),
      message: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      helpResource: Type.Optional(Type.String()),
    }),
    address: Type.Object({
      type: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      address1: Type.Optional(Type.String()),
      address2: Type.Optional(Type.String()),
      address3: Type.Optional(Type.String()),
      address4: Type.Optional(Type.String()),
      num1: Type.Optional(Type.String()),
      num2: Type.Optional(Type.String()),
      addrField1: Type.Optional(Type.String()),
      addrField2: Type.Optional(Type.String()),
      addrField3: Type.Optional(Type.String()),
      house: Type.Optional(Type.String()),
      city: Type.Optional(Type.String()),
      county: Type.Optional(Type.String()),
      stateCode: Type.Optional(Type.String()),
      stateName: Type.Optional(Type.String()),
      postalCode: Type.Optional(Type.String()),
      countryCode: Type.Optional(Type.String()),
      countryName: Type.Optional(Type.String()),
      formattedAddress: Type.Optional(Type.String()),
      primary: Type.Optional(Type.Boolean()),
      disclose: Type.Optional(Type.Boolean()),
      uiControl: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      lastChangedBy: Type.Optional(
        Type.Index(definitions, Type.Literal("party"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    affiliation: Type.Object({
      type: Type.Index(definitions, Type.Literal("descriptor")),
      detail: Type.Optional(Type.String()),
      status: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    allowedUnits: Type.Object({
      minimum: Type.Number(),
      maximum: Type.Number(),
      forAcademicProgress: Type.Optional(Type.Number()),
      forFinancialAid: Type.Optional(Type.Number()),
    }),
    assignedClassMaterials: Type.Object({
      status: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      noneAssigned: Type.Boolean(),
      instructions: Type.Optional(Type.String()),
      classMaterials: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("classMaterial")))
      ),
    }),
    assignedInstructor: Type.Object({
      assignmentNumber: Type.Optional(Type.Number()),
      instructor: Type.Index(definitions, Type.Literal("person")),
      role: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      contactMinutes: Type.Optional(Type.Number()),
      printInScheduleOfClasses: Type.Optional(Type.Boolean()),
      gradeRosterAccess: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
    }),
    association: Type.Object({
      primary: Type.Boolean(),
      primaryAssociatedComponent: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      primaryAssociatedSectionId: Type.Optional(Type.Number()),
      primaryAssociatedSectionIds: Type.Optional(Type.Array(Type.Number())),
      associatedClass: Type.Optional(Type.Number()),
    }),
    catalogNumber: Type.Object({
      prefix: Type.Optional(Type.String()),
      number: Type.String(),
      suffix: Type.Optional(Type.String()),
      formatted: Type.String(),
    }),
    class: Type.Object({
      course: Type.Index(definitions, Type.Literal("course")),
      offeringNumber: Type.Number(),
      session: Type.Index(definitions, Type.Literal("session")),
      number: Type.String(),
      displayName: Type.String(),
      classTitle: Type.Optional(Type.String()),
      classTranscriptTitle: Type.Optional(Type.String()),
      classDescription: Type.Optional(Type.String()),
      primaryComponent: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      allowedUnits: Type.Optional(
        Type.Index(definitions, Type.Literal("allowedUnits"))
      ),
      gradingBasis: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      requirementDesignation: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      contactHours: Type.Optional(Type.Number()),
      blindGrading: Type.Optional(Type.Boolean()),
      assignedClassMaterials: Type.Optional(
        Type.Index(definitions, Type.Literal("assignedClassMaterials"))
      ),
      instructionMode: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      status: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      lastCancelled: Type.Optional(Type.String()),
      anyPrintInScheduleOfClasses: Type.Optional(Type.Boolean()),
      anyPrintInstructors: Type.Optional(Type.Boolean()),
      anyFeesExist: Type.Optional(Type.Boolean()),
      finalExam: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      aggregateEnrollmentStatus: Type.Optional(
        Type.Index(definitions, Type.Literal("classSectionEnrollmentStatus"))
      ),
    }),
    classMaterial: Type.Object({
      sequenceNumber: Type.Number(),
      type: Type.Index(definitions, Type.Literal("descriptor")),
      status: Type.Index(definitions, Type.Literal("descriptor")),
      title: Type.String(),
      author: Type.Optional(Type.String()),
      isbn: Type.Optional(Type.String()),
      yearPublished: Type.Optional(Type.String()),
      publisher: Type.Optional(Type.String()),
      edition: Type.Optional(Type.String()),
      price: Type.Optional(Type.Index(definitions, Type.Literal("price"))),
      notes: Type.Optional(Type.String()),
    }),
    classSection: Type.Object({
      id: Type.Number(),
      class: Type.Optional(Type.Index(definitions, Type.Literal("class"))),
      number: Type.Optional(Type.String()),
      component: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      displayName: Type.Optional(Type.String()),
      instructionMode: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      type: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      academicOrganization: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      academicGroup: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      startDate: Type.Optional(Type.String()),
      endDate: Type.Optional(Type.String()),
      status: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      cancelledDate: Type.Optional(Type.String()),
      association: Type.Optional(
        Type.Index(definitions, Type.Literal("association"))
      ),
      enrollmentStatus: Type.Optional(
        Type.Index(definitions, Type.Literal("classSectionEnrollmentStatus"))
      ),
      printInScheduleOfClasses: Type.Optional(Type.Boolean()),
      addConsentRequired: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      dropConsentRequired: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      graded: Type.Optional(Type.Boolean()),
      feesExist: Type.Optional(Type.Boolean()),
      characteristics: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("descriptor")))
      ),
      roomShare: Type.Optional(Type.Boolean()),
      sectionAttributes: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("sectionAttribute")))
      ),
      roomCharacteristics: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("quantity")))
      ),
      meetings: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("meeting")))
      ),
      exams: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("exam")))
      ),
      combination: Type.Optional(
        Type.Index(definitions, Type.Literal("combination"))
      ),
    }),
    classSectionEnrollment: Type.Object({
      id: Type.Number(),
      enrollmentStatus: Type.Optional(
        Type.Index(definitions, Type.Literal("classSectionEnrollmentStatus"))
      ),
    }),
    classSectionEnrollmentStatus: Type.Object({
      status: Type.Index(definitions, Type.Literal("descriptor")),
      enrolledCount: Type.Optional(Type.Number()),
      reservedCount: Type.Optional(Type.Number()),
      waitlistedCount: Type.Optional(Type.Number()),
      minEnroll: Type.Optional(Type.Number()),
      maxEnroll: Type.Optional(Type.Number()),
      maxWaitlist: Type.Optional(Type.Number()),
      openReserved: Type.Optional(Type.Number()),
      instructorAddConsentRequired: Type.Optional(Type.Boolean()),
      instructorDropConsentRequired: Type.Optional(Type.Boolean()),
      seatReservations: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("seatReservation")))
      ),
    }),
    combination: Type.Object({
      id: Type.String(),
      description: Type.Optional(Type.String()),
      type: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      enrolledCountCombinedSections: Type.Optional(Type.Number()),
      waitlistedCountCombinedSections: Type.Optional(Type.Number()),
      maxEnrollCombinedSections: Type.Optional(Type.Number()),
      maxWaitlistCombinedSections: Type.Optional(Type.Number()),
      combinedSections: Type.Optional(Type.Array(Type.Number())),
    }),
    component: Type.Object({
      instructionMethod: Type.Index(definitions, Type.Literal("descriptor")),
      primary: Type.Optional(Type.Boolean()),
      contactHours: Type.Number(),
      minContactHours: Type.Optional(Type.Number()),
      maxContactHours: Type.Optional(Type.Number()),
      finalExam: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      feesExist: Type.Optional(Type.Boolean()),
    }),
    course: Type.Object({
      identifiers: Type.Array(
        Type.Index(definitions, Type.Literal("identifier"))
      ),
      subjectArea: Type.Index(definitions, Type.Literal("descriptor")),
      catalogNumber: Type.Index(definitions, Type.Literal("catalogNumber")),
      classSubjectArea: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      displayName: Type.Optional(Type.String()),
      classDisplayName: Type.Optional(Type.String()),
      formerDisplayName: Type.Optional(Type.String()),
      title: Type.Optional(Type.String()),
      transcriptTitle: Type.Optional(Type.String()),
      description: Type.Optional(Type.String()),
      academicCareer: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      academicGroup: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      academicOrganization: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      departmentNicknames: Type.Optional(Type.String()),
      primaryInstructionMethod: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      credit: Type.Optional(Type.Index(definitions, Type.Literal("credit"))),
      gradingBasis: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      blindGrading: Type.Optional(Type.Boolean()),
      status: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
      createdDate: Type.Optional(Type.String()),
      updatedDate: Type.Optional(Type.String()),
      printInCatalog: Type.Optional(Type.Boolean()),
      printInstructors: Type.Optional(Type.Boolean()),
      anyFeesExist: Type.Optional(Type.Boolean()),
      finalExam: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      instructorAddConsentRequired: Type.Optional(Type.Boolean()),
      instructorDropConsentRequired: Type.Optional(Type.Boolean()),
      allowMultipleEnrollments: Type.Optional(Type.Boolean()),
      spansMultipleTerms: Type.Optional(Type.Boolean()),
      multipleTermNumber: Type.Optional(Type.Number()),
      contactHours: Type.Optional(Type.Number()),
      workloadHours: Type.Optional(Type.Number()),
      enrollmentUnitLoadCalculator: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      tIE: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      cIP: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      hEGIS: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      repeatability: Type.Optional(
        Type.Index(definitions, Type.Literal("repeatability"))
      ),
      preparation: Type.Optional(
        Type.Index(definitions, Type.Literal("preparation"))
      ),
      requisites: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      creditRestriction: Type.Optional(
        Type.Index(definitions, Type.Literal("creditRestriction"))
      ),
      gradeReplacement: Type.Optional(
        Type.Index(definitions, Type.Literal("gradeReplacement"))
      ),
      courseObjectives: Type.Optional(Type.Array(Type.String())),
      studentLearningOutcomes: Type.Optional(Type.Array(Type.String())),
      proposedInstructors: Type.Optional(Type.Array(Type.String())),
      formatsOffered: Type.Optional(
        Type.Index(definitions, Type.Literal("formatsOffered"))
      ),
      crossListing: Type.Optional(
        Type.Index(definitions, Type.Literal("crossListing"))
      ),
      classCrossListing: Type.Optional(
        Type.Index(definitions, Type.Literal("crossListing"))
      ),
      requirementsFulfilled: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("descriptor")))
      ),
    }),
    credit: Type.Object({
      type: Type.String(),
      value: Type.Index(definitions, Type.Literal("creditValue")),
    }),
    creditRange: Type.Object({
      minUnits: Type.Number(),
      maxUnits: Type.Number(),
    }),
    creditRestriction: Type.Object({
      restrictionText: Type.Optional(Type.String()),
      restrictionCourses: Type.Optional(
        Type.Array(
          Type.Index(definitions, Type.Literal("creditRestrictionCourse"))
        )
      ),
    }),
    creditRestrictionCourse: Type.Object({
      course: Type.Index(definitions, Type.Literal("minimalCourse")),
      maxCreditPercentage: Type.Number(),
    }),
    creditValue: Type.Object({
      discrete: Type.Optional(Type.Array(Type.Number())),
      range: Type.Optional(
        Type.Index(definitions, Type.Literal("creditRange"))
      ),
      units: Type.Optional(Type.Number()),
    }),
    crossListing: Type.Object({
      count: Type.Number(),
      courses: Type.Optional(Type.Array(Type.String())),
    }),
    cursor: Type.Object({
      previous: Type.Optional(Type.String()),
      next: Type.Optional(Type.String()),
    }),
    descriptor: Type.Object({
      code: Type.Optional(Type.String()),
      description: Type.Optional(Type.String()),
      formalDescription: Type.Optional(Type.String()),
      active: Type.Optional(Type.Boolean()),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    disability: Type.Object({
      status: Type.Index(definitions, Type.Literal("descriptor")),
      disabled: Type.Optional(Type.Boolean()),
      disabledVet: Type.Optional(Type.Boolean()),
    }),
    education: Type.Object({
      highestLevel: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      fullTimeStudent: Type.Optional(Type.Boolean()),
    }),
    email: Type.Object({
      type: Type.Index(definitions, Type.Literal("descriptor")),
      emailAddress: Type.String(),
      primary: Type.Optional(Type.Boolean()),
      disclose: Type.Optional(Type.Boolean()),
      uiControl: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    emergencyContact: Type.Object({
      name: Type.String(),
      address: Type.Optional(Type.Index(definitions, Type.Literal("address"))),
      phones: Type.Array(Type.Index(definitions, Type.Literal("phone"))),
      email: Type.Optional(Type.String()),
      relationship: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      preferred: Type.Optional(Type.Boolean()),
    }),
    ethnicity: Type.Object({
      group: Type.Index(definitions, Type.Literal("descriptor")),
      hispanicLatino: Type.Optional(Type.Boolean()),
      detail: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
    }),
    event: Type.Object({
      date: Type.Optional(Type.String()),
      time: Type.Optional(Type.String()),
      duration: Type.Optional(Type.String()),
      description: Type.Optional(Type.String()),
      locality: Type.Optional(Type.String()),
      stateCode: Type.Optional(Type.String()),
      countryCode: Type.Optional(Type.String()),
    }),
    exam: Type.Object({
      number: Type.Optional(Type.Number()),
      type: Type.Index(definitions, Type.Literal("descriptor")),
      location: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      building: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      date: Type.String(),
      startTime: Type.String(),
      endTime: Type.String(),
    }),
    fieldValue: Type.Object({
      code: Type.Optional(Type.String()),
      description: Type.Optional(Type.String()),
      formalDescription: Type.Optional(Type.String()),
    }),
    fieldValueList: Type.Object({
      fieldName: Type.String(),
      fieldValues: Type.Array(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
    }),
    format: Type.Intersect([
      Type.Object({
        termsAllowed: Type.Optional(Type.Array(Type.String())),
        session: Type.Optional(Type.String()),
        description: Type.Optional(Type.String()),
        aggregateContactHours: Type.Number(),
        aggregateMinContactHours: Type.Number(),
        aggregateMaxContactHours: Type.Number(),
        minWorkloadHours: Type.Number(),
        maxWorkloadHours: Type.Number(),
        anyFeesExist: Type.Optional(Type.Boolean()),
        finalExam: Type.Optional(
          Type.Index(definitions, Type.Literal("descriptor"))
        ),
        components: Type.Optional(
          Type.Array(Type.Index(definitions, Type.Literal("component")))
        ),
      }),
      Type.Object({
        sessionType: Type.Unknown(),
      }),
    ]),
    formatsOffered: Type.Object({
      description: Type.Optional(Type.String()),
      formats: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("format")))
      ),
      typicallyOffered: Type.Optional(
        Type.Index(definitions, Type.Literal("typicallyOffered"))
      ),
      summerOnly: Type.Optional(Type.Boolean()),
    }),
    gender: Type.Object({
      genderOfRecord: Type.Index(definitions, Type.Literal("descriptor")),
      discloseGenderOfRecord: Type.Optional(Type.Boolean()),
      sexAtBirth: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      discloseSexAtBirth: Type.Optional(Type.Boolean()),
      genderIdentity: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      discloseGenderIdentity: Type.Optional(Type.Boolean()),
      sexualOrientation: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      discloseSexualOrientation: Type.Optional(Type.Boolean()),
      lastChangedBy: Type.Optional(
        Type.Index(definitions, Type.Literal("party"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    gradeReplacement: Type.Object({
      gradeReplacementGroup: Type.Optional(Type.String()),
      gradeReplacementText: Type.Optional(Type.String()),
      gradeReplacementCourses: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("minimalCourse")))
      ),
    }),
    identifier: Type.Object({
      type: Type.String(),
      id: Type.String(),
      primary: Type.Optional(Type.Boolean()),
      disclose: Type.Optional(Type.Boolean()),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    language: Type.Object({
      name: Type.Index(definitions, Type.Literal("descriptor")),
      translate: Type.Optional(Type.Boolean()),
      teach: Type.Optional(Type.Boolean()),
      speakingProficiency: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      readingProficiency: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      writingProficiency: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      evaluationDate: Type.Optional(Type.String()),
      native: Type.Optional(Type.Boolean()),
    }),
    meeting: Type.Object({
      number: Type.Number(),
      meetsDays: Type.Optional(Type.String()),
      meetsMonday: Type.Optional(Type.Boolean()),
      meetsTuesday: Type.Optional(Type.Boolean()),
      meetsWednesday: Type.Optional(Type.Boolean()),
      meetsThursday: Type.Optional(Type.Boolean()),
      meetsFriday: Type.Optional(Type.Boolean()),
      meetsSaturday: Type.Optional(Type.Boolean()),
      meetsSunday: Type.Optional(Type.Boolean()),
      startTime: Type.Optional(Type.String()),
      endTime: Type.Optional(Type.String()),
      location: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      building: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      assignedInstructors: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("assignedInstructor")))
      ),
      startDate: Type.Optional(Type.String()),
      endDate: Type.Optional(Type.String()),
      meetingTopic: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      meetingDescription: Type.Optional(Type.String()),
    }),
    minimalCourse: Type.Object({
      identifiers: Type.Array(
        Type.Index(definitions, Type.Literal("identifier"))
      ),
      subjectArea: Type.Index(definitions, Type.Literal("descriptor")),
      catalogNumber: Type.Index(definitions, Type.Literal("catalogNumber")),
      displayName: Type.Optional(Type.String()),
      title: Type.Optional(Type.String()),
      transcriptTitle: Type.Optional(Type.String()),
    }),
    name: Type.Object({
      type: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      familyName: Type.String(),
      givenName: Type.String(),
      middleName: Type.Optional(Type.String()),
      suffixName: Type.Optional(Type.String()),
      formattedName: Type.Optional(Type.String()),
      preferred: Type.Optional(Type.Boolean()),
      disclose: Type.Optional(Type.Boolean()),
      uiControl: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      lastChangedBy: Type.Optional(
        Type.Index(definitions, Type.Literal("party"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    officialDocument: Type.Object({
      type: Type.Index(definitions, Type.Literal("descriptor")),
      identifier: Type.Optional(Type.String()),
      status: Type.Optional(Type.String()),
      dateIssued: Type.Optional(Type.String()),
      issuingAuthority: Type.Optional(Type.String()),
      placeIssued: Type.Optional(Type.String()),
      entryDate: Type.Optional(Type.String()),
      duration: Type.Optional(Type.String()),
      expirationDate: Type.Optional(Type.String()),
      supportDocuments: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("supportDocument")))
      ),
    }),
    party: Type.Object({
      id: Type.String(),
      name: Type.String(),
    }),
    person: Type.Object({
      identifiers: Type.Array(
        Type.Index(definitions, Type.Literal("identifier"))
      ),
      names: Type.Array(Type.Index(definitions, Type.Literal("name"))),
      gender: Type.Optional(Type.Index(definitions, Type.Literal("gender"))),
      affiliations: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("affiliation")))
      ),
      addresses: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("address")))
      ),
      phones: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("phone")))
      ),
      emails: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("email")))
      ),
      urls: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("url")))
      ),
      photos: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("url")))
      ),
      ethnicities: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("ethnicity")))
      ),
      disability: Type.Optional(
        Type.Index(definitions, Type.Literal("disability"))
      ),
      languages: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("language")))
      ),
      usaCountry: Type.Optional(
        Type.Index(definitions, Type.Literal("usaCountry"))
      ),
      foreignCountries: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("descriptor")))
      ),
      education: Type.Optional(
        Type.Index(definitions, Type.Literal("education"))
      ),
      emergencyContacts: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("emergencyContact")))
      ),
      birth: Type.Optional(Type.Index(definitions, Type.Literal("event"))),
      death: Type.Optional(Type.Index(definitions, Type.Literal("event"))),
    }),
    phone: Type.Object({
      type: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      number: Type.String(),
      countryCode: Type.Optional(Type.String()),
      extension: Type.Optional(Type.String()),
      primary: Type.Optional(Type.Boolean()),
      disclose: Type.Optional(Type.Boolean()),
      uiControl: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    preparation: Type.Object({
      recommendedText: Type.Optional(Type.String()),
      recommendedCourses: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("minimalCourse")))
      ),
      requiredText: Type.Optional(Type.String()),
      requiredCourses: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("minimalCourse")))
      ),
    }),
    price: Type.Object({
      amount: Type.Number(),
      currency: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
    }),
    quantity: Type.Intersect([
      Type.Index(definitions, Type.Literal("descriptor")),
      Type.Object({
        quantity: Type.Number(),
      }),
    ]),
    repeatability: Type.Object({
      repeatable: Type.Optional(Type.Boolean()),
      description: Type.Optional(Type.String()),
      maxCredit: Type.Optional(Type.Number()),
      maxCount: Type.Optional(Type.Number()),
    }),
    seatReservation: Type.Object({
      number: Type.Number(),
      requirementGroup: Type.Index(definitions, Type.Literal("descriptor")),
      fromDate: Type.String(),
      maxEnroll: Type.Number(),
      enrolledCount: Type.Optional(Type.Number()),
    }),
    sectionAttribute: Type.Object({
      attribute: Type.Index(definitions, Type.Literal("descriptor")),
      value: Type.Index(definitions, Type.Literal("descriptor")),
    }),
    session: Type.Object({
      id: Type.String(),
      name: Type.String(),
      term: Type.Index(definitions, Type.Literal("term")),
      timePeriods: Type.Optional(
        Type.Array(Type.Index(definitions, Type.Literal("timePeriod")))
      ),
    }),
    supportDocument: Type.Object({
      type: Type.Index(definitions, Type.Literal("descriptor")),
      identifier: Type.Optional(Type.String()),
      description: Type.Optional(Type.String()),
      dateIssued: Type.Optional(Type.String()),
      issuingAuthority: Type.Optional(Type.String()),
      expirationDate: Type.Optional(Type.String()),
      requestDate: Type.Optional(Type.String()),
      receivedDate: Type.Optional(Type.String()),
    }),
    term: Type.Object({
      id: Type.String(),
      name: Type.String(),
    }),
    timePeriod: Type.Object({
      period: Type.Index(definitions, Type.Literal("descriptor")),
      endDate: Type.String(),
    }),
    typicallyOffered: Type.Object({
      terms: Type.Optional(Type.Array(Type.String())),
      comments: Type.Optional(Type.String()),
    }),
    url: Type.Object({
      type: Type.Optional(Type.Index(definitions, Type.Literal("descriptor"))),
      url: Type.String(),
      primary: Type.Optional(Type.Boolean()),
      disclose: Type.Optional(Type.Boolean()),
      fromDate: Type.Optional(Type.String()),
      toDate: Type.Optional(Type.String()),
    }),
    usaCountry: Type.Object({
      citizenshipStatus: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      militaryStatus: Type.Optional(
        Type.Index(definitions, Type.Literal("descriptor"))
      ),
      passport: Type.Optional(
        Type.Index(definitions, Type.Literal("officialDocument"))
      ),
      visa: Type.Optional(
        Type.Index(definitions, Type.Literal("officialDocument"))
      ),
    }),
  })
);

export type parameters = Static<typeof parameters>;
export const parameters = Type.Object({
  "page-number": Type.Number({
    description:
      "The set of records to return; can be used to traverse paginated data sets.",
    default: 1,
  }),
  "page-size": Type.Number({
    description:
      "The number of records returned in one paginated data set. Maximum is 100",
    default: 50,
  }),
  app_id: Type.String(),
  app_key: Type.String({
    description: "The private key portion of API Central credentials",
  }),
});

export type operations = Static<typeof operations>;
export const operations = Type.Object({
  getClassesUsingGET: Type.Object({
    parameters: Type.Object({
      query: Type.Object({
        "cs-course-id": Type.Optional(Type.String()),
        "term-id": Type.Optional(Type.String()),
        "session-id": Type.Optional(Type.String()),
        "subject-area-code": Type.Optional(Type.String()),
        "catalog-number": Type.Optional(Type.String()),
        "class-number": Type.Optional(Type.String()),
        "status-code": Type.Optional(Type.String()),
        "enrollment-status-code": Type.Optional(Type.String()),
        "waitlist-availability": Type.Optional(
          Type.Union([Type.Literal("open"), Type.Literal("full")])
        ),
        "final-exam-code": Type.Optional(Type.String()),
        "instruction-mode-code": Type.Optional(Type.String()),
        "fees-exist": Type.Optional(Type.Boolean()),
        "print-in-schedule": Type.Optional(Type.Boolean()),
        "page-number": Type.Optional(
          Type.Index(parameters, Type.Literal("page-number"))
        ),
        "page-size": Type.Optional(
          Type.Index(parameters, Type.Literal("page-size"))
        ),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(definitions, Type.Literal("classPayload")),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
  getClassDescriptorsUsingGET: Type.Object({
    parameters: Type.Object({
      query: Type.Object({
        "field-name": Type.Optional(Type.String()),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(definitions, Type.Literal("descriptorPayload")),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
  getClassSectionsUsingGET: Type.Object({
    parameters: Type.Object({
      query: Type.Object({
        "cs-course-id": Type.Optional(Type.String()),
        "term-id": Type.Optional(Type.String()),
        "subject-area-code": Type.Optional(Type.String()),
        "catalog-number": Type.Optional(Type.String()),
        "session-id": Type.Optional(Type.String()),
        "class-number": Type.Optional(Type.String()),
        "section-number": Type.Optional(Type.String()),
        "component-code": Type.Optional(Type.String()),
        "include-secondary": Type.Optional(Type.Boolean()),
        "meets-days": Type.Optional(Type.String()),
        "start-time": Type.Optional(Type.String()),
        "end-time": Type.Optional(Type.String()),
        "instructor-id": Type.Optional(Type.String()),
        "instructor-campus-uid": Type.Optional(Type.String()),
        "instructor-family-name": Type.Optional(Type.String()),
        "status-code": Type.Optional(Type.String()),
        "enrollment-status-code": Type.Optional(Type.String()),
        "waitlist-availability": Type.Optional(
          Type.Union([Type.Literal("open"), Type.Literal("full")])
        ),
        "final-exam-code": Type.Optional(Type.String()),
        "instruction-mode-code": Type.Optional(Type.String()),
        "fees-exist": Type.Optional(Type.Boolean()),
        "print-in-schedule": Type.Optional(Type.Boolean()),
        "release-status": Type.Optional(Type.String()),
        "page-number": Type.Optional(
          Type.Index(parameters, Type.Literal("page-number"))
        ),
        "page-size": Type.Optional(
          Type.Index(parameters, Type.Literal("page-size"))
        ),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(definitions, Type.Literal("classSectionPayload")),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
  getClassSectionByTermAndSectionIdUsingGET: Type.Object({
    parameters: Type.Object({
      path: Type.Object({
        "class-section-id": Type.String(),
      }),
      query: Type.Object({
        "term-id": Type.String(),
        "include-secondary": Type.Optional(Type.Boolean()),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(definitions, Type.Literal("classSectionPayload")),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
  getClassSectionEnrollmentInformationUsingGET: Type.Object({
    parameters: Type.Object({
      path: Type.Object({
        "class-section-id": Type.String(),
        "term-id": Type.String(),
      }),
      query: Type.Object({
        "seat-reservations": Type.Optional(Type.String()),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(
          definitions,
          Type.Literal("classSectionEnrollmentPayload")
        ),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
  getClassEnrollmentInformationUsingGET: Type.Object({
    parameters: Type.Object({
      path: Type.Object({
        "term-id": Type.String(),
      }),
      query: Type.Object({
        "updated-after": Type.String(),
        "updated-before": Type.String(),
        "seat-reservations": Type.Optional(Type.String()),
        "page-number": Type.Optional(
          Type.Index(parameters, Type.Literal("page-number"))
        ),
        "page-size": Type.Optional(
          Type.Index(parameters, Type.Literal("page-size"))
        ),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(
          definitions,
          Type.Literal("classSectionEnrollmentPayload")
        ),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
  getClassSectionDescriptorsUsingGET: Type.Object({
    parameters: Type.Object({
      query: Type.Object({
        "field-name": Type.Optional(Type.String()),
      }),
      header: Type.Object({
        app_id: Type.Index(parameters, Type.Literal("app_id")),
        app_key: Type.Index(parameters, Type.Literal("app_key")),
      }),
    }),
    responses: Type.Object({
      200: Type.Object({
        schema: Type.Index(definitions, Type.Literal("descriptorPayload")),
      }),
      400: Type.Object({
        schema: Type.Index(definitions, Type.Literal("errorPayload")),
      }),
      401: Type.Unknown(),
      403: Type.Unknown(),
      404: Type.Unknown(),
      500: Type.Unknown(),
    }),
  }),
});

export type external = Static<typeof external>;
export const external = Type.Object({});
