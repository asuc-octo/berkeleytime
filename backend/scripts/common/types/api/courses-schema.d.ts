/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v4/courses": {
    /** Returns course data conforming to the Course EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
    get: operations["findCourseCollectionUsingGET"];
  };
  "/v4/courses/{id}": {
    /** Given an ID, returns course data conforming to the Course EDO described on http://bMeta.berkeley.edu */
    get: operations["findCourseByIdUsingGET"];
  };
}

export interface definitions {
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  coursesPayload: {
    apiResponse?: definitions["coursesResponse"];
  };
  coursesResponse: definitions["apiResponse"] & {
    responseType?: string;
    response?: {
      courses: definitions["course"][];
    };
  } & {
    response: unknown;
  };
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  errorPayload: {
    apiResponse?: definitions["apiResponse"];
  };
  apiResponse: {
    source?: string;
    correlationId?: string;
    /** Format: date */
    timeStamp?: string;
    cursor?: definitions["cursor"];
    httpStatus: definitions["descriptor"];
    message?: definitions["descriptor"];
    /** Format: uri */
    helpResource?: string;
  };
  catalogNumber: {
    prefix?: string;
    number: string;
    suffix?: string;
    formatted: string;
  };
  cip: {
    code?: string;
    description?: string;
  };
  component: {
    instructionMethod: definitions["descriptor"];
    primary: boolean;
    /** Format: float */
    contactHours?: number;
    /** Format: float */
    minContactHours: number;
    /** Format: float */
    maxContactHours: number;
    /** Format: float */
    workloadHours?: number;
    finalExam?: definitions["descriptor"];
    feesExist?: boolean;
  };
  course: {
    identifiers: definitions["identifier"][];
    subjectArea: definitions["descriptor"];
    catalogNumber: definitions["catalogNumber"];
    classSubjectArea?: definitions["descriptor"];
    displayName?: string;
    classDisplayName?: string;
    formerDisplayName?: string;
    title?: string;
    transcriptTitle?: string;
    description?: string;
    academicCareer?: definitions["descriptor"];
    academicGroup?: definitions["descriptor"];
    academicOrganization?: definitions["descriptor"];
    departmentNicknames?: string;
    primaryInstructionMethod?: definitions["descriptor"];
    credit?: definitions["credit"];
    gradingBasis?: definitions["descriptor"];
    blindGrading?: boolean;
    status?: definitions["descriptor"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
    /** Format: date */
    createdDate?: string;
    /** Format: date */
    updatedDate?: string;
    printInCatalog?: boolean;
    printInstructors?: boolean;
    anyFeesExist?: boolean;
    finalExam?: definitions["descriptor"];
    instructorAddConsentRequired?: boolean;
    instructorDropConsentRequired?: boolean;
    allowMultipleEnrollments?: boolean;
    spansMultipleTerms?: boolean;
    multipleTermNumber?: number;
    /** Format: float */
    contactHours?: number;
    /** Format: float */
    workloadHours?: number;
    enrollmentUnitLoadCalculator?: definitions["descriptor"];
    tie?: definitions["tie"];
    cip?: definitions["cip"];
    hegis?: definitions["hegis"];
    repeatability?: definitions["repeatability"];
    preparation?: definitions["preparation"];
    requisites?: definitions["descriptor"];
    creditRestriction?: definitions["creditRestriction"];
    courseObjectives?: string[];
    studentLearningOutcomes?: string[];
    proposedInstructors?: string[];
    formatsOffered?: definitions["formatsOffered"];
    crossListing?: definitions["crossListing"];
    classCrossListing?: definitions["crossListing"];
    requirementsFulfilled?: definitions["requirementFulfilled"][];
  };
  credit: {
    type: string;
    value: definitions["creditValue"];
  };
  creditDiscrete: {
    units: number[];
  };
  creditFixed: {
    /** Format: float */
    units: number;
  };
  creditRange: {
    /** Format: float */
    minUnits: number;
    /** Format: float */
    maxUnits: number;
  };
  creditRestriction: {
    restrictionText?: string;
    restrictionCourses?: definitions["creditRestrictionCourse"][];
  };
  creditRestrictionCourse: {
    course: definitions["minimalCourse"];
    /** Format: float */
    maxCreditPercentage: number;
  };
  creditValue: {
    fixed?: definitions["creditFixed"];
    range?: definitions["creditRange"];
    discrete?: definitions["creditDiscrete"];
  };
  crossListing: {
    count: number;
    courses: string[];
  };
  cursor: {
    previous?: string;
    next?: string;
  };
  descriptor: {
    code?: string;
    description?: string;
    formalDescription?: string;
    active?: boolean;
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  format: {
    termsAllowed: definitions["termName"][];
    sessionType: string;
    description?: string;
    /** Format: float */
    aggregateContactHours?: number;
    /** Format: float */
    aggregateMinContactHours: number;
    /** Format: float */
    aggregateMaxContactHours: number;
    /** Format: float */
    minWorkloadHours: number;
    /** Format: float */
    maxWorkloadHours: number;
    anyFeesExist?: boolean;
    finalExam?: definitions["descriptor"];
    components?: definitions["component"][];
  };
  formatsOffered: {
    description?: string;
    formats: definitions["format"][];
    typicallyOffered?: definitions["typicallyOffered"];
    summerOnly?: boolean;
  };
  hegis: {
    code?: string;
    description?: string;
  };
  identifier: {
    type: string;
    id: string;
    primary?: boolean;
    disclose?: boolean;
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  minimalCourse: {
    identifiers: definitions["identifier"][];
    subjectArea?: definitions["descriptor"];
    catalogNumber?: definitions["catalogNumber"];
    displayName: string;
  };
  preparation: {
    recommendedText?: string;
    recommendedCourses?: definitions["minimalCourse"][];
    requiredText?: string;
    requiredCourses?: definitions["minimalCourse"][];
  };
  repeatability: {
    repeatable: boolean;
    description?: string;
    /** Format: float */
    maxCredit?: number;
    maxCount?: number;
  };
  requirementFulfilled: {
    code?: string;
    description?: string;
  };
  termName: string;
  tie: {
    code?: string;
    description?: string;
  };
  typicallyOffered: {
    terms?: definitions["termName"][];
    comments?: string;
  };
  /** Format: float */
  units: number;
}

export interface parameters {
  /**
   * @description The set of records to return; can be used to traverse paginated data sets.
   * @default 1
   */
  "page-number": number;
  /**
   * @description The number of records returned in one paginated data set. Maximum is 100
   * @default 50
   */
  "page-size": number;
  /** @description The public ID portion of API Central credentials */
  app_id: string;
  /**
   * Format: password
   * @description The private key portion of API Central credentials
   */
  app_key: string;
}

export interface operations {
  /** Returns course data conforming to the Course EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
  findCourseCollectionUsingGET: {
    parameters: {
      query: {
        /** A code indicating a course's current state as regards its availability to be offered */
        "status-code"?: string;
        /** Either a specific code representing an area of academic inquiry covered in the course, e.g., "MATH" -- or a string pattern preceded and/or followed by "%" wildcards, which will match against both the "subjectArea.code" and the "departmentNicknames" (e.g. "%ENGIN%" will return all courses with a subjectArea.code or a departmentNickname that includes the string "ENGIN") */
        "subject-area-code"?: string;
        /** The entire human-readable number for a course, e.g. "C123AC" -- must be an exact match */
        "catalog-number"?: string;
        /** The alpha character/s preceding the numeric portion of the catalog number, e.g. the first "C" in "C123AC" */
        "course-prefix"?: string;
        /** The numeric portion of the catalog number, e.g. "123" in "C123AC" */
        "course-number"?: string;
        /** The high level grouping of academic policy within UC Berkeley, e.g., "UGRD" */
        "academic-career-code"?: string;
        /** An approved unit value for the course (if discrete or a range of values are allowed, this value must be within them) */
        units?: string;
        /** Return only courses offered exclusively during the summer term (defaults to false) */
        "summer-only"?: string;
        /** A code indicating the method of recording performance in the course */
        "grading-basis-code"?: string;
        /** A code indicating a University, Campus, or General Education academic requirement fulfilled when the course is successfully completed */
        "requirement-fulfilled-code"?: string;
        /** Return only courses updated since this date (inclusive) â€“ must be in the format "YYYY-MM-DD", e.g., "2021-04-17" */
        "last-updated-since"?: string;
        /** Sort the list of courses returned by this element. Valid values are "subject-area-code," "last-updated," and "catalog-number" */
        "sort-by"?: "subject-area-code" | "last-updated" | "catalog-number";
        /** The set of records to return; can be used to traverse paginated data sets. */
        "page-number"?: parameters["page-number"];
        /** The number of records returned in one paginated data set. Maximum is 100 */
        "page-size"?: parameters["page-size"];
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["coursesPayload"];
      };
      /** Bad Request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Given an ID, returns course data conforming to the Course EDO described on http://bMeta.berkeley.edu */
  findCourseByIdUsingGET: {
    parameters: {
      path: {
        /** Some code or number uniquely identifying the course (no wildcards allowed) */
        id: string;
      };
      query: {
        /** The type of ID being submitted (if left blank, "displayName" is assumed) */
        "id-type"?:
          | ""
          | "cms-id"
          | "cs-course-id"
          | "cms-version-independent-id";
        /** A code indicating a course's current state as regards its availability to be offered */
        "status-code"?: string;
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["coursesPayload"];
      };
      /** Bad Request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: {
        schema: definitions["errorPayload"];
      };
      /** Internal Server Error */
      500: unknown;
    };
  };
}

export interface external {}
