/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/classes": {
    /**
     * Returns class data, consisting of the Student/Class EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu)
     * ***Note:** At least one of cs-course-id or term-id query parameters is required.*
     */
    get: operations["getClassesUsingGET"];
  };
  "/v1/classes/descriptors": {
    /** Returns field names and the canonical coded values and descriptions allowed for them, in the format of the Common/FieldValueList EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
    get: operations["getClassDescriptorsUsingGET"];
  };
  "/v1/classes/sections": {
    /**
     * Returns class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu)
     * ***Note:** At least one of cs-course-id or term-id query parameters is required.*
     */
    get: operations["getClassSectionsUsingGET"];
  };
  "/v1/classes/sections/{class-section-id}": {
    /** Returns class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu)> */
    get: operations["getClassSectionByTermAndSectionIdUsingGET"];
  };
  "/v1/classes/sections/{class-section-id}/term/{term-id}/enrollment": {
    /** Returns enrollment counts for class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
    get: operations["getClassSectionEnrollmentInformationUsingGET"];
  };
  "/v1/classes/sections/terms/{term-id}/updated/enrollments": {
    /** Returns enrollment counts for class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
    get: operations["getClassEnrollmentInformationUsingGET"];
  };
  "/v1/classes/sections/descriptors": {
    /** Returns field names and the canonical coded values and descriptions allowed for them, in the format of the Common/FieldValueList EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
    get: operations["getClassSectionDescriptorsUsingGET"];
  };
}

export interface definitions {
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  classPayload: {
    apiResponse?: definitions["classResponse"];
  };
  classResponse: definitions["apiResponse"] & {
    responseType?: string;
    response?: {
      classes?: definitions["class"][];
    };
  } & {
    httpStatus: unknown;
    response: unknown;
  };
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  classSectionPayload: {
    apiResponse?: definitions["classSectionResponse"];
  };
  classSectionResponse: definitions["apiResponse"] & {
    responseType?: string;
    response?: {
      classSections?: definitions["classSection"][];
    };
  } & {
    httpStatus: unknown;
    response: unknown;
  };
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  classSectionEnrollmentPayload: {
    apiResponse?: definitions["classSectionEnrollmentResponse"];
  };
  classSectionEnrollmentResponse: definitions["apiResponse"] & {
    responseType?: string;
    response?: {
      classSections?: definitions["classSectionEnrollment"][];
    };
  } & {
    httpStatus: unknown;
    response: unknown;
  };
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  descriptorPayload: {
    apiResponse?: definitions["descriptorResponse"];
  };
  descriptorResponse: definitions["apiResponse"] & {
    responseType?: string;
    response?: {
      fieldValueLists?: definitions["fieldValueList"][];
    };
  } & {
    httpStatus: unknown;
    response: unknown;
  };
  /** @description Only included as a wrapper to "apiResponse" in JSON responses */
  errorPayload: {
    apiResponse?: definitions["apiResponse"];
  };
  apiResponse: {
    source?: string;
    correlationId?: string;
    /** Format: dateTime */
    timeStamp?: string;
    cursor?: definitions["cursor"];
    httpStatus: definitions["descriptor"];
    message?: definitions["descriptor"];
    /** Format: uri */
    helpResource?: string;
  };
  address: {
    type?: definitions["descriptor"];
    address1?: string;
    address2?: string;
    address3?: string;
    address4?: string;
    num1?: string;
    num2?: string;
    addrField1?: string;
    addrField2?: string;
    addrField3?: string;
    house?: string;
    city?: string;
    county?: string;
    stateCode?: string;
    stateName?: string;
    postalCode?: string;
    /** @default USA */
    countryCode?: string;
    countryName?: string;
    formattedAddress?: string;
    /** @default false */
    primary?: boolean;
    /** @default false */
    disclose?: boolean;
    uiControl?: definitions["descriptor"];
    lastChangedBy?: definitions["party"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  affiliation: {
    type: definitions["descriptor"];
    detail?: string;
    status?: definitions["descriptor"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  allowedUnits: {
    /** Format: float */
    minimum: number;
    /** Format: float */
    maximum: number;
    /** Format: float */
    forAcademicProgress?: number;
    /** Format: float */
    forFinancialAid?: number;
  };
  assignedClassMaterials: {
    status?: definitions["descriptor"];
    noneAssigned: boolean;
    instructions?: string;
    classMaterials?: definitions["classMaterial"][];
  };
  assignedInstructor: {
    assignmentNumber?: number;
    instructor: definitions["person"];
    role?: definitions["descriptor"];
    contactMinutes?: number;
    printInScheduleOfClasses?: boolean;
    gradeRosterAccess?: definitions["descriptor"];
  };
  association: {
    primary: boolean;
    primaryAssociatedComponent?: definitions["descriptor"];
    primaryAssociatedSectionId?: number;
    primaryAssociatedSectionIds?: number[];
    associatedClass?: number;
  };
  catalogNumber: {
    prefix?: string;
    number: string;
    suffix?: string;
    formatted: string;
  };
  class: {
    course: definitions["course"];
    offeringNumber: number;
    session: definitions["session"];
    number: string;
    displayName: string;
    classTitle?: string;
    classTranscriptTitle?: string;
    classDescription?: string;
    primaryComponent?: definitions["descriptor"];
    allowedUnits?: definitions["allowedUnits"];
    gradingBasis?: definitions["descriptor"];
    requirementDesignation?: definitions["descriptor"];
    /** Format: float */
    contactHours?: number;
    blindGrading?: boolean;
    assignedClassMaterials?: definitions["assignedClassMaterials"];
    instructionMode?: definitions["descriptor"];
    status?: definitions["descriptor"];
    /** Format: date */
    lastCancelled?: string;
    anyPrintInScheduleOfClasses?: boolean;
    anyPrintInstructors?: boolean;
    anyFeesExist?: boolean;
    finalExam?: definitions["descriptor"];
    aggregateEnrollmentStatus?: definitions["classSectionEnrollmentStatus"];
  };
  classMaterial: {
    sequenceNumber: number;
    type: definitions["descriptor"];
    status: definitions["descriptor"];
    title: string;
    author?: string;
    isbn?: string;
    yearPublished?: string;
    publisher?: string;
    edition?: string;
    price?: definitions["price"];
    notes?: string;
  };
  classSection: {
    id: number;
    class?: definitions["class"];
    number?: string;
    component?: definitions["descriptor"];
    displayName?: string;
    instructionMode?: definitions["descriptor"];
    type?: definitions["descriptor"];
    academicOrganization?: definitions["descriptor"];
    academicGroup?: definitions["descriptor"];
    /** Format: date */
    startDate?: string;
    /** Format: date */
    endDate?: string;
    status?: definitions["descriptor"];
    /** Format: date */
    cancelledDate?: string;
    association?: definitions["association"];
    enrollmentStatus?: definitions["classSectionEnrollmentStatus"];
    printInScheduleOfClasses?: boolean;
    addConsentRequired?: definitions["descriptor"];
    dropConsentRequired?: definitions["descriptor"];
    graded?: boolean;
    feesExist?: boolean;
    characteristics?: definitions["descriptor"][];
    roomShare?: boolean;
    sectionAttributes?: definitions["sectionAttribute"][];
    roomCharacteristics?: definitions["quantity"][];
    meetings?: definitions["meeting"][];
    exams?: definitions["exam"][];
    combination?: definitions["combination"];
  };
  classSectionEnrollment: {
    id: number;
    enrollmentStatus?: definitions["classSectionEnrollmentStatus"];
  };
  classSectionEnrollmentStatus: {
    status: definitions["descriptor"];
    enrolledCount?: number;
    reservedCount?: number;
    waitlistedCount?: number;
    minEnroll?: number;
    maxEnroll?: number;
    maxWaitlist?: number;
    openReserved?: number;
    instructorAddConsentRequired?: boolean;
    instructorDropConsentRequired?: boolean;
    seatReservations?: definitions["seatReservation"][];
  };
  combination: {
    id: string;
    description?: string;
    type?: definitions["descriptor"];
    enrolledCountCombinedSections?: number;
    waitlistedCountCombinedSections?: number;
    maxEnrollCombinedSections?: number;
    maxWaitlistCombinedSections?: number;
    combinedSections?: number[];
  };
  component: {
    instructionMethod: definitions["descriptor"];
    /** @default false */
    primary?: boolean;
    /** Format: float */
    contactHours: number;
    /** Format: float */
    minContactHours?: number;
    /** Format: float */
    maxContactHours?: number;
    finalExam?: definitions["descriptor"];
    /** @default false */
    feesExist?: boolean;
  };
  course: {
    identifiers: definitions["identifier"][];
    subjectArea: definitions["descriptor"];
    catalogNumber: definitions["catalogNumber"];
    classSubjectArea?: definitions["descriptor"];
    displayName?: string;
    classDisplayName?: string;
    formerDisplayName?: string;
    title?: string;
    transcriptTitle?: string;
    description?: string;
    academicCareer?: definitions["descriptor"];
    academicGroup?: definitions["descriptor"];
    academicOrganization?: definitions["descriptor"];
    departmentNicknames?: string;
    primaryInstructionMethod?: definitions["descriptor"];
    credit?: definitions["credit"];
    gradingBasis?: definitions["descriptor"];
    blindGrading?: boolean;
    status?: definitions["descriptor"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
    /** Format: date */
    createdDate?: string;
    /** Format: date */
    updatedDate?: string;
    printInCatalog?: boolean;
    printInstructors?: boolean;
    anyFeesExist?: boolean;
    finalExam?: definitions["descriptor"];
    instructorAddConsentRequired?: boolean;
    instructorDropConsentRequired?: boolean;
    allowMultipleEnrollments?: boolean;
    spansMultipleTerms?: boolean;
    multipleTermNumber?: number;
    /** Format: float */
    contactHours?: number;
    /** Format: float */
    workloadHours?: number;
    enrollmentUnitLoadCalculator?: definitions["descriptor"];
    tIE?: definitions["descriptor"];
    cIP?: definitions["descriptor"];
    hEGIS?: definitions["descriptor"];
    repeatability?: definitions["repeatability"];
    preparation?: definitions["preparation"];
    requisites?: definitions["descriptor"];
    creditRestriction?: definitions["creditRestriction"];
    gradeReplacement?: definitions["gradeReplacement"];
    courseObjectives?: string[];
    studentLearningOutcomes?: string[];
    proposedInstructors?: string[];
    formatsOffered?: definitions["formatsOffered"];
    crossListing?: definitions["crossListing"];
    classCrossListing?: definitions["crossListing"];
    requirementsFulfilled?: definitions["descriptor"][];
  };
  credit: {
    type: string;
    value: definitions["creditValue"];
  };
  creditRange: {
    /** Format: float */
    minUnits: number;
    /** Format: float */
    maxUnits: number;
  };
  creditRestriction: {
    restrictionText?: string;
    restrictionCourses?: definitions["creditRestrictionCourse"][];
  };
  creditRestrictionCourse: {
    course: definitions["minimalCourse"];
    /** Format: float */
    maxCreditPercentage: number;
  };
  creditValue: {
    discrete?: number[];
    range?: definitions["creditRange"];
    /** Format: float */
    units?: number;
  };
  crossListing: {
    count: number;
    courses?: string[];
  };
  cursor: {
    previous?: string;
    next?: string;
  };
  descriptor: {
    code?: string;
    description?: string;
    formalDescription?: string;
    active?: boolean;
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  disability: {
    status: definitions["descriptor"];
    /** @default false */
    disabled?: boolean;
    /** @default false */
    disabledVet?: boolean;
  };
  education: {
    highestLevel?: definitions["descriptor"];
    fullTimeStudent?: boolean;
  };
  email: {
    type: definitions["descriptor"];
    /** Format: email */
    emailAddress: string;
    primary?: boolean;
    disclose?: boolean;
    uiControl?: definitions["descriptor"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  emergencyContact: {
    name: string;
    address?: definitions["address"];
    phones: definitions["phone"][];
    email?: string;
    relationship?: definitions["descriptor"];
    /** @default false */
    preferred?: boolean;
  };
  ethnicity: {
    group: definitions["descriptor"];
    /** @default false */
    hispanicLatino?: boolean;
    detail?: definitions["descriptor"];
  };
  event: {
    /** Format: date */
    date?: string;
    /** Format: date */
    time?: string;
    /** Format: date */
    duration?: string;
    description?: string;
    locality?: string;
    stateCode?: string;
    countryCode?: string;
  };
  exam: {
    number?: number;
    type: definitions["descriptor"];
    location?: definitions["descriptor"];
    building?: definitions["descriptor"];
    /** Format: date */
    date: string;
    /** Format: time */
    startTime: string;
    /** Format: time */
    endTime: string;
  };
  fieldValue: {
    code?: string;
    description?: string;
    formalDescription?: string;
  };
  fieldValueList: {
    fieldName: string;
    fieldValues: definitions["descriptor"][];
  };
  format: {
    termsAllowed?: string[];
    session?: string;
    description?: string;
    /** Format: float */
    aggregateContactHours: number;
    /** Format: float */
    aggregateMinContactHours: number;
    /** Format: float */
    aggregateMaxContactHours: number;
    /** Format: float */
    minWorkloadHours: number;
    /** Format: float */
    maxWorkloadHours: number;
    /** @default false */
    anyFeesExist?: boolean;
    finalExam?: definitions["descriptor"];
    components?: definitions["component"][];
  } & {
    sessionType: unknown;
  };
  formatsOffered: {
    description?: string;
    formats?: definitions["format"][];
    typicallyOffered?: definitions["typicallyOffered"];
    /** @default false */
    summerOnly?: boolean;
  };
  gender: {
    genderOfRecord: definitions["descriptor"];
    discloseGenderOfRecord?: boolean;
    sexAtBirth?: definitions["descriptor"];
    discloseSexAtBirth?: boolean;
    genderIdentity?: definitions["descriptor"];
    discloseGenderIdentity?: boolean;
    sexualOrientation?: definitions["descriptor"];
    discloseSexualOrientation?: boolean;
    lastChangedBy?: definitions["party"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  gradeReplacement: {
    gradeReplacementGroup?: string;
    gradeReplacementText?: string;
    gradeReplacementCourses?: definitions["minimalCourse"][];
  };
  identifier: {
    type: string;
    id: string;
    primary?: boolean;
    disclose?: boolean;
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  language: {
    name: definitions["descriptor"];
    /** @default false */
    translate?: boolean;
    /** @default false */
    teach?: boolean;
    speakingProficiency?: definitions["descriptor"];
    readingProficiency?: definitions["descriptor"];
    writingProficiency?: definitions["descriptor"];
    /** Format: date */
    evaluationDate?: string;
    /** @default false */
    native?: boolean;
  };
  meeting: {
    number: number;
    meetsDays?: string;
    meetsMonday?: boolean;
    meetsTuesday?: boolean;
    meetsWednesday?: boolean;
    meetsThursday?: boolean;
    meetsFriday?: boolean;
    meetsSaturday?: boolean;
    meetsSunday?: boolean;
    /** Format: time */
    startTime?: string;
    /** Format: time */
    endTime?: string;
    location?: definitions["descriptor"];
    building?: definitions["descriptor"];
    assignedInstructors?: definitions["assignedInstructor"][];
    /** Format: date */
    startDate?: string;
    /** Format: date */
    endDate?: string;
    meetingTopic?: definitions["descriptor"];
    meetingDescription?: string;
  };
  minimalCourse: {
    identifiers: definitions["identifier"][];
    subjectArea: definitions["descriptor"];
    catalogNumber: definitions["catalogNumber"];
    displayName?: string;
    title?: string;
    transcriptTitle?: string;
  };
  name: {
    type?: definitions["descriptor"];
    familyName: string;
    givenName: string;
    middleName?: string;
    suffixName?: string;
    formattedName?: string;
    preferred?: boolean;
    disclose?: boolean;
    uiControl?: definitions["descriptor"];
    lastChangedBy?: definitions["party"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  officialDocument: {
    type: definitions["descriptor"];
    identifier?: string;
    status?: string;
    /** Format: date */
    dateIssued?: string;
    issuingAuthority?: string;
    placeIssued?: string;
    /** Format: date */
    entryDate?: string;
    duration?: string;
    /** Format: date */
    expirationDate?: string;
    supportDocuments?: definitions["supportDocument"][];
  };
  party: {
    id: string;
    name: string;
  };
  person: {
    identifiers: definitions["identifier"][];
    names: definitions["name"][];
    gender?: definitions["gender"];
    affiliations?: definitions["affiliation"][];
    addresses?: definitions["address"][];
    phones?: definitions["phone"][];
    emails?: definitions["email"][];
    urls?: definitions["url"][];
    photos?: definitions["url"][];
    ethnicities?: definitions["ethnicity"][];
    disability?: definitions["disability"];
    languages?: definitions["language"][];
    usaCountry?: definitions["usaCountry"];
    foreignCountries?: definitions["descriptor"][];
    education?: definitions["education"];
    emergencyContacts?: definitions["emergencyContact"][];
    birth?: definitions["event"];
    death?: definitions["event"];
  };
  phone: {
    type?: definitions["descriptor"];
    number: string;
    countryCode?: string;
    extension?: string;
    primary?: boolean;
    disclose?: boolean;
    uiControl?: definitions["descriptor"];
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  preparation: {
    recommendedText?: string;
    recommendedCourses?: definitions["minimalCourse"][];
    requiredText?: string;
    requiredCourses?: definitions["minimalCourse"][];
  };
  price: {
    /** Format: float */
    amount: number;
    currency?: definitions["descriptor"];
  };
  quantity: definitions["descriptor"] & {
    quantity: number;
  };
  repeatability: {
    /** @default false */
    repeatable?: boolean;
    description?: string;
    /** Format: float */
    maxCredit?: number;
    maxCount?: number;
  };
  seatReservation: {
    number: number;
    requirementGroup: definitions["descriptor"];
    /** Format: date */
    fromDate: string;
    maxEnroll: number;
    enrolledCount?: number;
  };
  sectionAttribute: {
    attribute: definitions["descriptor"];
    value: definitions["descriptor"];
  };
  session: {
    id: string;
    name: string;
    term: definitions["term"];
    timePeriods?: definitions["timePeriod"][];
  };
  supportDocument: {
    type: definitions["descriptor"];
    identifier?: string;
    description?: string;
    /** Format: date */
    dateIssued?: string;
    issuingAuthority?: string;
    /** Format: date */
    expirationDate?: string;
    /** Format: date */
    requestDate?: string;
    /** Format: date */
    receivedDate?: string;
  };
  term: {
    id: string;
    name: string;
  };
  timePeriod: {
    period: definitions["descriptor"];
    /** Format: date */
    endDate: string;
  };
  typicallyOffered: {
    terms?: string[];
    comments?: string;
  };
  url: {
    type?: definitions["descriptor"];
    /** Format: uri */
    url: string;
    primary?: boolean;
    disclose?: boolean;
    /** Format: date */
    fromDate?: string;
    /** Format: date */
    toDate?: string;
  };
  usaCountry: {
    citizenshipStatus?: definitions["descriptor"];
    militaryStatus?: definitions["descriptor"];
    passport?: definitions["officialDocument"];
    visa?: definitions["officialDocument"];
  };
}

export interface parameters {
  /**
   * @description The set of records to return; can be used to traverse paginated data sets.
   * @default 1
   */
  "page-number": number;
  /**
   * @description The number of records returned in one paginated data set. Maximum is 100
   * @default 50
   */
  "page-size": number;
  /** @description The public ID portion of API Central credentials */
  app_id: string;
  /**
   * Format: password
   * @description The private key portion of API Central credentials
   */
  app_key: string;
}

export interface operations {
  /**
   * Returns class data, consisting of the Student/Class EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu)
   * ***Note:** At least one of cs-course-id or term-id query parameters is required.*
   */
  getClassesUsingGET: {
    parameters: {
      query: {
        /** The unique id for a canonical course in Campus Solutions */
        "cs-course-id"?: string;
        /** The ID uniquely identifying the term */
        "term-id"?: string;
        /** The ID uniquely identifying a session within the term */
        "session-id"?: string;
        /** The area of academic inquiry, such as MATH or ENGLISH */
        "subject-area-code"?: string;
        /** The human-readable number identifying a class within a subject area, such as R1A */
        "catalog-number"?: string;
        /** The index uniquely identifying the class among those with the specified subject area and catalog number */
        "class-number"?: string;
        /** The code indicating whether the class is active or otherwise */
        "status-code"?: string;
        /** The code indicating whether the class is open for enrollment */
        "enrollment-status-code"?: string;
        /** Return only classes with at least one section having a waitlist, whether open or full */
        "waitlist-availability"?: "open" | "full";
        /** The code indicating whether and what kind of final exam is required */
        "final-exam-code"?: string;
        /** The code indicating whether the class is offered in-person or over the web */
        "instruction-mode-code"?: string;
        /** Whether the class requires any additional fees */
        "fees-exist"?: boolean;
        /** Whether the class includes any sections that are to be printed in the Schedule of Classes */
        "print-in-schedule"?: boolean;
        /** The set of records to return; can be used to traverse paginated data sets. */
        "page-number"?: parameters["page-number"];
        /** The number of records returned in one paginated data set. Maximum is 100 */
        "page-size"?: parameters["page-size"];
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["classPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /** Returns field names and the canonical coded values and descriptions allowed for them, in the format of the Common/FieldValueList EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
  getClassDescriptorsUsingGET: {
    parameters: {
      query: {
        /** The name of a particular coded field, expressed in dot notation (e.g., "class.status"). If this parameter is omitted, all class related fields and value lists are returned. */
        "field-name"?: string;
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["descriptorPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /**
   * Returns class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu)
   * ***Note:** At least one of cs-course-id or term-id query parameters is required.*
   */
  getClassSectionsUsingGET: {
    parameters: {
      query: {
        /** The unique id for a canonical course in Campus Solutions */
        "cs-course-id"?: string;
        /** The ID uniquely identifying the term */
        "term-id"?: string;
        /** The area of academic inquiry, such as MATH or ENGLISH */
        "subject-area-code"?: string;
        /** The human-readable number identifying a class within a subject area, such as R1A */
        "catalog-number"?: string;
        /** The ID uniquely identifying a session within the term */
        "session-id"?: string;
        /** The index uniquely identifying the class among those with the specified subject area and catalog number */
        "class-number"?: string;
        /** The index uniquely identifying the section among those associated with the same class */
        "section-number"?: string;
        /** The code representing the type of section, e.g., LEC */
        "component-code"?: string;
        /** Whether to return class sections where primary = false */
        "include-secondary"?: boolean;
        /** A concatination of the first two characters of the day names to include, e.g., MoWeFr */
        "meets-days"?: string;
        /** The time at or after which the class meeting begins (in HH:MM:SS format where HH is 00-24, and :SS is optional) */
        "start-time"?: string;
        /** The time at or before which the class meeting ends (in HH:MM:SS format where HH is 00-24, and :SS is optional) */
        "end-time"?: string;
        /** The instructor's ID number in Campus Solutions */
        "instructor-id"?: string;
        /** The instructor's CalNet UID number */
        "instructor-campus-uid"?: string;
        /** The instructor's last name */
        "instructor-family-name"?: string;
        /** The code indicating whether the class section is active or otherwise */
        "status-code"?: string;
        /** The code indicating whether the class section is open for enrollment */
        "enrollment-status-code"?: string;
        /** Return only class sections having a waitlist, whether open or full */
        "waitlist-availability"?: "open" | "full";
        /** The code indicating whether and what kind of final exam is required */
        "final-exam-code"?: string;
        /** The code indicating whether the class section is offered in-person or over the web */
        "instruction-mode-code"?: string;
        /** Whether the class section requires any additional fees */
        "fees-exist"?: boolean;
        /** Whether the class section is to be printed in the Schedule of Classes */
        "print-in-schedule"?: boolean;
        /** [TBD] */
        "release-status"?: string;
        /** The set of records to return; can be used to traverse paginated data sets. */
        "page-number"?: parameters["page-number"];
        /** The number of records returned in one paginated data set. Maximum is 100 */
        "page-size"?: parameters["page-size"];
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["classSectionPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /** Returns class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu)> */
  getClassSectionByTermAndSectionIdUsingGET: {
    parameters: {
      path: {
        /** The ID number uniquely identifying a class section within a term */
        "class-section-id": string;
      };
      query: {
        /** The ID uniquely identifying the term */
        "term-id": string;
        /** Whether to also return secondary class sections if class-section-id identifies a primary section */
        "include-secondary"?: boolean;
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["classSectionPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /** Returns enrollment counts for class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
  getClassSectionEnrollmentInformationUsingGET: {
    parameters: {
      path: {
        /** The ID number uniquely identifying a class section within a term */
        "class-section-id": string;
        /** The ID uniquely identifying the term */
        "term-id": string;
      };
      query: {
        /** [TBD] */
        "seat-reservations"?: string;
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["classSectionEnrollmentPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /** Returns enrollment counts for class section data, consisting of the Student/Class Section EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
  getClassEnrollmentInformationUsingGET: {
    parameters: {
      path: {
        /** The ID uniquely identifying the term */
        "term-id": string;
      };
      query: {
        /** Defines the lower boundary of the time period (in yyyy-MM-ddTHH:mm:ss where HH is 00-23) */
        "updated-after": string;
        /** Defines the upper boundary of the time period (in yyyy-MM-ddTHH:mm:ss where HH is 00-23) */
        "updated-before": string;
        /** [TBD] */
        "seat-reservations"?: string;
        /** The set of records to return; can be used to traverse paginated data sets. */
        "page-number"?: parameters["page-number"];
        /** The number of records returned in one paginated data set. Maximum is 100 */
        "page-size"?: parameters["page-size"];
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["classSectionEnrollmentPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /** Returns field names and the canonical coded values and descriptions allowed for them, in the format of the Common/FieldValueList EDO described on [bMeta.berkeley.edu](http://bMeta.berkeley.edu) */
  getClassSectionDescriptorsUsingGET: {
    parameters: {
      query: {
        /** The name of a particular coded field, expressed in dot notation (e.g., "classSection.status"). If this parameter is omitted, all class section related fields and value lists are returned. */
        "field-name"?: string;
      };
      header: {
        /** The public ID portion of API Central credentials */
        app_id: parameters["app_id"];
        /** The private key portion of API Central credentials */
        app_key: parameters["app_key"];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["descriptorPayload"];
      };
      /** Bad request */
      400: {
        schema: definitions["errorPayload"];
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not found */
      404: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
}

export interface external {}
