# Default values
# https://github.com/bitnami/charts/blob/d7677560c211ed0b44aab879e5bf7c232a32d3ef/bitnami/mongodb/values.yaml

# MANUALLY EXTRACT SECRETS FROM K8S CLUSTER:
# export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace default bt-mdb-staging -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)
# export MONGODB_PASSWORD=$(kubectl get secret --namespace default bt-mdb-staging -o jsonpath="{.data.mongodb-password}" | base64 --decode)
# export MONGODB_REPLICA_SET_KEY=$(kubectl get secret --namespace "default" bt-mdb-staging -o jsonpath="{.data.mongodb-replica-set-key}" | base64 --decode)

# INSTALL A MONGODB CLIENT LOCALLY ON UBUNTU 20.04:
# apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 656408E390CFB1F5
# echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse" > /etc/apt/sources.list.d/mongodb.list
# apt install -y mongodb-org

# MANUALLY VERIFY WORKS IN MONGO:
# mongo "mongodb://<username>:<password>@bt-mdb-staging-0.bt-mdb-staging-headless.default.svc.cluster.local,bt-mdb-staging-1.bt-mdb-staging-headless.default.svc.cluster.local/?authSource=admin&replicaSet=rs0"
# OR for external access:
# mongo "mongodb+srv://<username>:<password>@mdb.berkeleytime.com/?authSource=admin&replicaSet=rs0"
# use bt
# db.fruits.insertOne({ name: "Mango", season: "Summer"})
# db.fruits.find({})

# example secret format for existingSecret:
# mongodb-password=<any pass>
# mongodb-replica-set-key=<any key>
# mongodb-root-password=<any pass>

# Fancy mongodb dns srv records in GCP so that mongodb+srv is possible
# gcloud dns record-sets delete --zone berkeleytime --type SRV _mongodb._tcp.mdb.berkeleytime.com.
# gcloud dns record-sets delete --zone berkeleytime --type TXT mdb.berkeleytime.com.
# gcloud dns record-sets create _mongodb._tcp.mdb.berkeleytime.com. --type SRV --ttl 300 --zone berkeleytime --rrdatas "0 0 27017 mdb0.berkeleytime.com.","0 0 27018 mdb1.berkeleytime.com.","0 0 27019 mdb2.berkeleytime.com."
# gcloud dns record-sets create mdb.berkeleytime.com. --type TXT --ttl 300 --zone berkeleytime --rrdatas "authSource=bt&replicaSet=rs0"

arbiter:
  enabled: false
architecture: replicaset # replicaset is great as it enables transaction support
auth:
  enabled: true
  existingSecret: bt-mdb-$CI_ENVIRONMENT_NAME
  username: bt
  database: bt
fullnameOverride: bt-mdb-$CI_ENVIRONMENT_NAME
persistence:
  size: 1G
  accessModes:
    - ReadWriteOnce
  mountPath: /bitnami/mongodb
  subPath: ""
replicaSetName: rs0
strategyType: RollingUpdate
externalAccess:
  enabled: true
  service:
    type: NodePort
    domain: berkeleytime.com
    nodePorts:
      - 32017
# readinessProbe: # must be disabled so that traffic can use svc name for sidecar
# enabled: false
replicaCount: $MDB_REPLICA_COUNT
# sidecars: # custom sidecar waits for mdb to start, then changes hostnames to dns, only required if replicaCount > 1
#   - name: mongo
#     image: mongo:4.4.4
#     env:
#       - name: DOMAIN
#         value: berkeleytime.com
#       - name: PORT
#         value: "27017"
#       - name: REPLICAS
#         value: "$MDB_REPLICA_COUNT"
#     envFrom:
#       - secretRef:
#           name: bt-mdb-$CI_ENVIRONMENT_NAME
#     command:
#       - bash
#       - -c
#       - |
#         while true
#         do
#           password=`env | sed -n 's/mongodb-root-password=\(.*\)/\1/p'`

#           mongo "mongodb://root:${password}@localhost" -- << EOF
#             const replicaCount = $REPLICAS;
#             const domain = "$DOMAIN";
#             const h = getHostName();
#             const baseHostname = h.split('-').slice(0, -1).join('-');
#             const basePort = $PORT;
#             const c = rs.conf();
#             const s = rs.status();

#             if (
#                 s.members &&
#                 s.members.length == replicaCount &&
#                 s.members.every(member => member.name.includes(baseHostname) && member.health == 1)
#               ) {
#                 print("all replicas healthy and properly named");
#                 quit(255);
#             }
#             c.members = [];
#             if (h.includes('staging')) {
#               for (let i = 0; i < replicaCount; i++) {
#                 c.members.push({ _id: i, host: \`\${domain}:\${basePort + i}\`})
#               }
#             } else {
#               for (let i = 0; i < replicaCount; i++) {
#                 c.members.push({ _id: i, host: \`\${baseHostname}-\${i}:\${basePort}\` });
#               }
#             }
#             rs.reconfig(c, { force: true }); // forced reconfig results in maxing out NumberLong https://stackoverflow.com/questions/15285060/reconfig-mongo-replicaset-increments-version-randomly
#         EOF

#           if [[ $? -eq 255 ]]; then
#             echo `date +"%Y-%m-%d %H:%M:%S"` ...replica set is configured correctly...
#             sleep 600
#           else
#             echo `date +"%Y-%m-%d %H:%M:%S"` ...retrying replica set configuration...
#             sleep 15
#           fi
#         done
# livenessProbe:
#   enabled: false
#   initialDelaySeconds: 300
#   timeoutSeconds: 5
#   failureThreshold: 20
#   successThreshold: 1
# readinessProbe: # required to be disabled so that svc cluster traffic can arrive
#   enabled: false
#   initialDelaySeconds: 300
#   timeoutSeconds: 10
#   failureThreshold: 20
#   successThreshold: 1
tls:
  enabled: false # only because we want to bring external certs from LetsEncrypt
# existingSecret: # only use this if self-signed certs are desired, because apparently this can only do self-signed certs # https://github.com/bitnami/charts/issues/6045#issuecomment-831480168

extraEnvVars:
  - name: MONGODB_EXTRA_FLAGS
    value: --tlsMode allowTLS --tlsCAFile /pki/lets-encrypt-r3.pem --tlsCertificateKeyFile /pki/tls.pem --tlsAllowConnectionsWithoutCertificates
extraVolumes:
  - name: pki
    emptyDir: {} # this vol is for building pem file for mdb container using tls
  - name: letsencrypt
    secret:
      secretName: bt-tls # change secretName to whichever LetsEncrypt TLS secret
      items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
extraVolumeMounts:
  - name: pki
    mountPath: /pki
initContainers:
  - name: curl
    image: curlimages/curl
    command:
      - sh
      - -c
      - |
        cat /letsencrypt/tls.crt /letsencrypt/tls.key > /pki/tls.pem
        curl https://letsencrypt.org/certs/lets-encrypt-r3.pem > /pki/lets-encrypt-r3.pem
    volumeMounts:
      - mountPath: /pki
        name: pki
      - mountPath: /letsencrypt
        name: letsencrypt
# configuration: |-
#   # Default configuration file that comes in Helm chart
#   # path: /opt/bitnami/mongodb/conf/mongodb.conf
#   # -------------------------------------------------
#   # mongod.conf
#   # for documentation of all options, see:
#   #   http://docs.mongodb.org/manual/reference/configuration-options/
#   storage:
#     dbPath: /bitnami/mongodb/data/db
#     journal:
#       enabled: true
#     directoryPerDB: false
#   systemLog:
#     destination: file
#     quiet: false
#     logAppend: true
#     logRotate: reopen
#     path: /opt/bitnami/mongodb/logs/mongodb.log
#     verbosity: 0
#   net:
#     port: 27017
#     unixDomainSocket:
#       enabled: true
#       pathPrefix: /opt/bitnami/mongodb/tmp
#     ipv6: false
#     bindIpAll: false
#     bindIp: 127.0.0.1
#   #replication:
#     #replSetName: replicaset
#     #enableMajorityReadConcern: true
#   # sharding options
#   #sharding:
#     #clusterRole:
#   # process management options
#   processManagement:
#     fork: false
#     pidFilePath: /opt/bitnami/mongodb/tmp/mongodb.pid
#   # set parameter options
#   setParameter:
#     enableLocalhostAuthBypass: true
#   # security options
#   security:
#     authorization: disabled
#     #keyFile: replace_me
