# Default values
# https://github.com/bitnami/charts/blob/d7677560c211ed0b44aab879e5bf7c232a32d3ef/bitnami/mongodb/values.yaml

# MANUALLY EXTRACT SECRETS FROM K8S CLUSTER:
# export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace default bt-mdb-staging -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)
# export MONGODB_PASSWORD=$(kubectl get secret --namespace default bt-mdb-staging -o jsonpath="{.data.mongodb-password}" | base64 --decode)
# export MONGODB_REPLICA_SET_KEY=$(kubectl get secret --namespace "default" bt-mdb-staging -o jsonpath="{.data.mongodb-replica-set-key}" | base64 --decode)

# INSTALL A MONGODB CLIENT LOCALLY ON UBUNTU 20.04:
# apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 656408E390CFB1F5
# echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse" | tee /etc/apt/sources.list.d/mongodb.list
# apt install -y mongodb-org

# MANUALLY VERIFY WORKS IN MONGO:
# mongo "mongodb://<username>:<password>@bt-mdb-staging-0.bt-mdb-staging-headless.default.svc.cluster.local,bt-mdb-staging-1.bt-mdb-staging-headless.default.svc.cluster.local/?authSource=admin&replicaSet=rs0"
# OR for external access:
# mongo "mongodb+srv://<username>:<password>@mdb.berkeleytime.com/?authSource=admin&replicaSet=rs0"
# use bt
# db.fruits.insertOne({ name: "Mango", season: "Summer"})
# db.fruits.find({})

# example secret format for existingSecret:
# mongodb-password=<any pass>
# mongodb-replica-set-key=<any key>
# mongodb-root-password=<any pass>

# Fancy mongodb dns srv records in GCP so that mongodb+srv is possible
# gcloud dns record-sets delete --zone berkeleytime --type SRV _mongodb._tcp.mdb.berkeleytime.com.
# gcloud dns record-sets delete --zone berkeleytime --type TXT mdb.berkeleytime.com.
# gcloud dns record-sets create _mongodb._tcp.mdb.berkeleytime.com. --type SRV --ttl 300 --zone berkeleytime --rrdatas "0 0 27017 mdb0.berkeleytime.com.","0 0 27018 mdb1.berkeleytime.com.","0 0 27019 mdb2.berkeleytime.com."
# gcloud dns record-sets create mdb.berkeleytime.com. --type TXT --ttl 300 --zone berkeleytime --rrdatas "authSource=bt&replicaSet=rs0"

arbiter:
  enabled: false
architecture: replicaset # replicaset is great as it enables transaction support
auth:
  enabled: true
  existingSecret: bt-mdb-$CI_ENVIRONMENT_NAME
  username: bt
  database: bt
fullnameOverride: bt-mdb-$CI_ENVIRONMENT_NAME
persistence:
  size: 500M
  accessModes:
    - ReadWriteOnce
  mountPath: /bitnami/mongodb
  subPath: ""
replicaSetName: rs0
replicaSetHostnames: true
strategyType: RollingUpdate
externalAccess:
  enabled: true
  service:
    type: ClusterIP
readinessProbe: # must be disabled so that traffic can go through svc for init
  enabled: false
replicaCount: 3
sidecars: # This sidecar waits first time replica set start, then change to dns
  - name: mongo
    image: mongo:4.4.4
    env:
      - name: DOMAIN
        value: berkeleytime.com
      - name: PORT
        value: "27017"
      - name: REPLICAS
        value: "3"
    envFrom:
      - secretRef:
          name: bt-mdb-$CI_ENVIRONMENT_NAME
    command:
      - bash
      - -c
      - |
        while true
        do
          password=`env | sed -n 's/mongodb-root-password=\(.*\)/\1/p'`

          mongo "mongodb://root:${password}@localhost" << EOF
            const replicaCount = $REPLICAS;
            const domain = "$DOMAIN";
            const h = getHostName();
            const baseHostname = h.split('-').slice(0, -1).join('-');
            const basePort = $PORT;
            const c = rs.conf();
            const s = rs.status();

            if (s.members.every(member => member.name.includes(baseHostname) && member.health == 1) ||
                s.members.every(member => member.name.includes(domain) && member.health == 1) ) {
                if (s.members.length == replicaCount) {
                  print("all replicas healthy and properly named");
                  quit(255);
                } else {
                  print("some replicas are missing");
                  quit(0);
                }
            }

            for (let [index, value] of c.members.entries()) {
              let port;
              if (h.includes('staging')) {
                c.members[index].host = \`$DOMAIN:\${basePort + index}\`;
              } else {
                c.members[index].host = \`\${baseHostname}-\${index}:\${basePort}\`;
              }
            }
            rs.reconfig(c, { force: true });
        EOF

          if [[ $? -eq 255 ]]; then
            echo ...`date +"%Y-%m-%d %H:%M:%S"` replica set is configured correctly...
            sleep 600
          else
            echo "retrying replica set configuration..."
            sleep 15
          fi
        done
# tls:
#   enabled: true
#   caCert: $CA_CERT
#   caKey: $CA_KEY

# old bash tricks but helpful tricks to keep just in case
# function check(){
#   mongo --eval 'db.runCommand("ping").ok' mongodb://root:${password}@$1 --quiet
# }
# i=$((${#HOSTNAME}-1))
# if [[ "${HOSTNAME:$i:1}" =~ "0" ]]
# then
#   # this is member 0, attempt to initialize replica set
# EOF
# else
#   echo this node is not the first init member, do nothing
#   while true; do sleep 1000; done;
# fi

# can replace container cmd, perhaps automate for staging external access
# command:
#   - bash
#   - -c
#   - |
#     mkdir -p /bitnami/mongodb/data/db
#     /opt/bitnami/mongodb/bin/mongod --config=/opt/bitnami/mongodb/conf/mongodb.conf

# configuration: |-
#   # Default configuration file that comes in Helm chart
#   # path: /opt/bitnami/mongodb/conf/mongodb.conf
#   # -------------------------------------------------
#   # mongod.conf
#   # for documentation of all options, see:
#   #   http://docs.mongodb.org/manual/reference/configuration-options/
#   storage:
#     dbPath: /bitnami/mongodb/data/db
#     journal:
#       enabled: true
#     directoryPerDB: false
#   systemLog:
#     destination: file
#     quiet: false
#     logAppend: true
#     logRotate: reopen
#     path: /opt/bitnami/mongodb/logs/mongodb.log
#     verbosity: 0
#   net:
#     port: 27017
#     unixDomainSocket:
#       enabled: true
#       pathPrefix: /opt/bitnami/mongodb/tmp
#     ipv6: false
#     bindIpAll: true
#     #bindIp:
#   replication:
#     replSetName: rs0
#     enableMajorityReadConcern: true
#   processManagement:
#      fork: false
#      pidFilePath: /opt/bitnami/mongodb/tmp/mongodb.pid
#   setParameter:
#      enableLocalhostAuthBypass: true
#   security:
#     authorization: disabled
#     keyFile: /opt/bitnami/mongodb/conf/keyfile
