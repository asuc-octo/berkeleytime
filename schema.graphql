"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type allowedUnits {
  minimum: Float
  maximum: Float
  forAcademicProgress: Float
  forFinancialAid: Float
}

type assignedClassMaterials {
  noneAssigned: Boolean
}

type assignedInstructor {
  assignmentNumber: Float
  instructor: instructor
  role: SIS_Code_Formal
  contactMinutes: Float
  printInScheduleOfClasses: Boolean
  gradeRosterAccess: SIS_Code_Formal
}

type association {
  primary: Boolean
  primaryAssociatedComponent: SIS_Code
  primaryAssociatedSectionId: Float
  primaryAssociatedSectionIds: [Float]
  associatedClass: Float
}

type CalAnswers_Grade_Schema {
  _doc: TypelessData
  _id: String
  _created: DateTime
  _updated: DateTime
  _version: Float
  GradeSortNbr: String
  EnrollmentCnt: Float
  CourseControlNbr: Float
  InstructorName: [String]
  CourseSubjectShortNm: String
  CourseNumber: String
  SectionNbr: String
  GradeSubtypeDesc: String
  GradeTypeDesc: String
  GradeNm: String
  CourseTitleNm: String
  term: grade_term
}

type catalogNumber {
  prefix: String
  number: String
  suffix: String
  formatted: String
}

type class_term {
  id: String
  name: String
}

type combination {
  id: String
  description: String
  type: SIS_Code
  enrolledCountCombinedSections: Float
  waitlistedCountCombinedSections: Float
  maxEnrollCombinedSections: Float
  maxWaitlistCombinedSections: Float
  combinedSections: [Float]
}

type component {
  instructionMethod: SIS_Code
  primary: Boolean
  minContactHours: Float
  maxContactHours: Float
  feesExist: Boolean
}

type course {
  identifiers: [identifier]
  displayName: String
}

type course_term {
  termNames: [String]
}

type credit {
  type: String
  value: value
}

type creditRestriction {
  restrictionText: String
  restrictionCourses: restrictionCourses
}

type creditRestrictionCourse {
  course: course
  maxCreditPercentage: Float
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type discrete {
  units: [Float]
}

type enrollmentStatus {
  status: SIS_Code
  enrolledCount: Float
  minEnroll: Float
  maxEnroll: Float
  maxWaitlist: Float
  instructorAddConsentRequired: Boolean
  instructorDropConsentRequired: Boolean
  waitlistedCount: Float
  openReserved: Float
  reservedCount: Float
}

type fixed {
  units: Float
}

type format {
  termsAllowed: termAllowed
  sessionType: String
  description: String
  aggregateMinContactHours: Float
  aggregateMaxContactHours: Float
  minWorkloadHours: Float
  maxWorkloadHours: Float
  anyFeesExist: Boolean
  components: [component]
}

type formatsOffered {
  description: String
  formats: [format]
  typicallyOffered: typicalOffer
  summerOnly: Boolean
}

type grade_term {
  year: Float
  month: Float
  semester: String
}

type identifier {
  type: String
  id: String
}

type instructor {
  identifiers: [instructor_identifiers]
  names: [instructor_names]
}

type instructor_identifiers {
  type: String
  id: String
  disclose: Boolean
}

type instructor_names {
  type: SIS_Code
  familyName: String
  givenName: String
  formattedName: String
  disclose: Boolean
  uiControl: SIS_Code
  fromDate: String
}

type meeting {
  number: Float
  meetsMonday: Boolean
  meetsTuesday: Boolean
  meetsWednesday: Boolean
  meetsThursday: Boolean
  meetsFriday: Boolean
  meetsSaturday: Boolean
  meetsSunday: Boolean
  startTime: String
  endTime: String
  assignedInstructors: [assignedInstructor]
  startDate: String
  endDate: String
  meetingTopic: meetingTopic
}

type meetingTopic {
  description: String
}

type preparation {
  requiredText: String
  requiredCourses: requiredCourse
}

type Query {
  CalAnswers_Grade(CourseControlNbr: Float!, year: Float!, semester: String!): [CalAnswers_Grade_Schema]
  SIS_Class_Section(id: Float!, year: Float!, semester: String!): [SIS_Class_Section_Schema]
  SIS_Class: [SIS_Class_Schema]

  """All departments in human-readable format"""
  subjects: [String]

  """Quick query for all SIS_Course displayNames, nothing else"""
  courseNames: [String]
  SIS_Course(displayName: String, subjectArea___description: String): [SIS_Course_Schema]
  users: [User_Schema]
  user(email: String, id: String): User_Schema
}

type range {
  minUnits: Float
  maxUnits: Float
}

type repeatability {
  repeatable: Boolean
  description: String
}

type requiredCourse {
  courses: [course]
}

type restrictionCourses {
  creditRestrictionCourses: [creditRestrictionCourse]
}

type sectionAttribute {
  attribute: SIS_Code_Formal
  value: SIS_Code_Formal
}

type session {
  id: String
  name: String
  term: class_term
}

type SIS_Class_Schema {
  _doc: TypelessData
  _id: ID
  _created: DateTime
  _updated: DateTime
  _version: Float
  course: SIS_Course_Schema
  allowedUnits: allowedUnits
  aggregateEnrollmentStatus: enrollmentStatus
  anyFeesExist: Boolean
  anyPrintInScheduleOfClasses: Boolean
  anyPrintInstructors: Boolean
  assignedClassMaterials: assignedClassMaterials
  blindGrading: Boolean
  contactHours: Float
  displayName: String
  finalExam: SIS_Code
  gradingBasis: SIS_Code
  instructionMode: SIS_Code
  offeringNumber: Float
  primaryComponent: SIS_Code
  status: SIS_Code
  number: String
  session: session
  _ccn: Int
  _sections: [SIS_Class_Section_Schema]
}

type SIS_Class_Section_Schema {
  _doc: TypelessData
  _id: ID
  _created: DateTime
  _updated: DateTime
  _version: Float
  class: SIS_Class_Schema
  id: Float
  academicGroup: SIS_Code_Formal
  academicOrganization: SIS_Code_Formal
  addConsentRequired: SIS_Code
  association: association
  combination: combination
  component: SIS_Code
  displayName: String
  dropConsentRequired: SIS_Code
  endDate: String
  enrollmentStatus: enrollmentStatus
  feesExist: Boolean
  graded: Boolean
  instructorAddConsentRequired: Boolean
  instructionMode: SIS_Code
  meetings: [meeting]
  number: String
  printInScheduleOfClasses: Boolean
  roomShare: Boolean
  sectionAttributes: [sectionAttribute]
  startDate: String
  status: SIS_Code
  type: SIS_Code_Formal
  _grades: [CalAnswers_Grade_Schema]
}

type SIS_Code {
  code: String
  description: String
}

type SIS_Code_Formal {
  code: String
  description: String
  formalDescription: String
}

"""A superset of all data resulting from the SIS Course API"""
type SIS_Course_Schema {
  _doc: TypelessData
  _id: ID
  _created: DateTime
  _updated: DateTime
  _version: Float
  academicCareer: SIS_Code
  academicGroup: SIS_Code
  academicOrganization: SIS_Code
  allowMultipleEnrollments: Boolean
  anyFeesExist: Boolean
  blindGrading: Boolean
  catalogNumber: catalogNumber
  cip: SIS_Code
  classDisplayName: String
  classSubjectArea: SIS_Code
  contactHours: Float
  createdDate: String
  credit: credit
  creditRestriction: creditRestriction
  departmentNicknames: String
  description: String
  displayName: String
  finalExam: SIS_Code
  formatsOffered: formatsOffered
  formerDisplayName: String
  fromDate: String
  gradingBasis: SIS_Code
  hegis: SIS_Code
  instructorAddConsentRequired: Boolean
  instructorDropConsentRequired: Boolean
  identifiers: [identifier]
  multipleTermNumber: Float
  preparation: preparation
  primaryInstructionMethod: SIS_Code
  printInCatalog: Boolean
  printInstructors: Boolean
  proposedInstructors: [String]
  repeatability: repeatability
  spansMultipleTerms: Boolean
  status: SIS_Code
  subjectArea: SIS_Code
  tie: SIS_Code
  title: String
  toDate: String
  transcriptTitle: String
  updatedDate: String
  workloadHours: Float
  _courseId: String
  _classes(year: Float, semester: String): [SIS_Class_Schema]
}

type termAllowed {
  termNames: [String]
}

scalar TypelessData

type typicalOffer {
  terms: course_term
  comments: String
}

type User_Schema {
  _id: ID
  _created: DateTime
  _updated: DateTime
  access_token: String
  admin: Boolean
  bio: String
  classes_saved: [SIS_Course_Schema]
  classes_watching: [SIS_Course_Schema]
  friends: [User_Schema]
  notify_update_classes: Boolean
  notify_update_grades: Boolean
  notify_update_berkeleytime: Boolean
  email: String
  google_id: String
  name: String
  refresh_token: String
  name_given: String
  name_family: String
}

type value {
  discrete: discrete
  fixed: fixed
  range: range
}

