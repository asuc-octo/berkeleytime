---
networks:
  bt:
    name: bt
services:
  backend:
    build:
      context: .
      target: backend-dev
    depends_on:
      - redis
      - mongodb
    networks:
      - bt
    restart: always
    volumes:
      - ./.env:/backend/apps/backend/.env
      - ./apps/backend/src:/backend/apps/backend/src
  frontend:
    build:
      context: .
      target: frontend-dev
    networks:
      - bt
    restart: always
    volumes:
      - ./apps/frontend/src:/frontend/apps/frontend/src
      - ./packages/theme/src:/frontend/packages/theme/src
      - ./apps/frontend/public:/frontend/apps/frontend/public
  weaviate:
    command:
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    - --scheme
    - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.27.2
    ports:
    - 8081:8080
    - 50051:50051
    volumes:
    - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_API_BASED_MODULES: 'true'
      CLUSTER_HOSTNAME: 'node1'
  mongodb:
    image: mongo:7.0.5
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    networks:
      - bt
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017',priority:1}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - ./data/mongodb/db:/data/db
      - ./data/mongodb/configdb:/data/configdb
  nginx:
    depends_on:
      - backend
      - frontend
    image: nginx:1.21
    networks:
      - bt
    ports:
      - 8080:8080
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
  redis:
    image: redis:7.2.4
    ports:
      - 6379:6379
    networks:
      - bt
    restart: always
volumes:
  weaviate_data:
