---
networks:
  bt:
    name: bt
services:
  backend:
    build:
      context: .
      target: backend-dev
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - bt
    restart: always
    volumes:
      - ./.env:/backend/apps/backend/.env
      - ./apps/backend/src:/backend/apps/backend/src
  frontend:
    build:
      context: .
      target: frontend-dev
    networks:
      - bt
    restart: always
    volumes:
      - ./apps/frontend/src:/frontend/apps/frontend/src
      - ./packages/theme/src:/frontend/packages/theme/src
      - ./apps/frontend/public:/frontend/apps/frontend/public
  ag-frontend:
    build:
      context: .
      target: ag-frontend-dev
    networks:
      - bt
    restart: always
    volumes:
      - ./apps/ag-frontend/src:/frontend/apps/ag-frontend/src
      - ./packages/theme/src:/frontend/packages/theme/src
      - ./apps/ag-frontend/public:/frontend/apps/ag-frontend/public
  mongodb:
    image: mongo:7.0.5
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    networks:
      - bt
    ports:
      - 27017:27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017',priority:1}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - ./data/mongodb/db:/data/db
      - ./data/mongodb/configdb:/data/configdb
  nginx:
    depends_on:
      - backend
      - frontend
      - ag-frontend
    image: nginx:1.21
    networks:
      - bt
    ports:
      - 8080:8080
      - 8081:8081
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
  redis:
    image: redis:7.2.4
    ports:
      - 6379:6379
    networks:
      - bt
    restart: always
