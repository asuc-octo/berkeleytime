directive @auth on OBJECT | FIELD_DEFINITION

"""
User account info.
"""
type User {
  email: String!
  username: String!
  first_name: String!
  last_name: String!
  major: [String!]!
  last_login: String!
  date_joined: String!
  is_staff: Boolean!
  is_active: Boolean!
  email_class_update: Boolean!
  email_grade_update: Boolean!
  email_enrollment_opening: Boolean!
  email_berkeleytime_update: Boolean!
}

"""
User input type for mutations.
"""
input UserInput {
  username: String
  first_name: String
  last_name: String
  major: [String!]
  email_class_update: Boolean
  email_grade_update: Boolean
  email_enrollment_opening: Boolean
  email_berkeleytime_update: Boolean
}

type Query {
  """
  Query for user info.
  """
  user: User
  grade(
    subject: String!
    courseNum: String!
    classNum: String
    term: TermInput
  ): Grade
  course(subject: String!, courseNumber: String!, term: TermInput): Course
  class(
    subject: String!
    courseNumber: String!
    term: TermInput!
    classNumber: String!
  ): Class
  section(
    subject: String!
    courseNumber: String!
    term: TermInput!
    classNumber: String!
    sectionNumber: String!
  ): Section

  """
  Get info about all courses and their corresponding classes for a given semester.

  Used primarily in the catalog page.
  """
  catalog(term: TermInput!): [CatalogItem]

  """
  Get a list of all course names across all semesters.

  Useful for searching for courses.
  """
  courseList: [CourseListItem]
  ping: String!

  """
  Takes in a user's email and returns all the schedules they created.
  """
  schedulesByUser(created_by: String!): [Schedule]

  """
  Takes in a schedule's ObjectID and returns a specific schedule.
  """
  scheduleByID(id: String!): Schedule
}

type Mutation {
  """
  Mutate user info.
  """
  updateUserInfo(newUserInfo: UserInput!): User

  """
  Delete user account.
  """
  deleteUser: User

  """
  Takes in a schedule's ObjectID, deletes the schedule with that ID, and returns the ID.
  """
  removeScheduleByID(id: ID!): ID

  """
  Takes in schedule fields, creates a new schedule record in the database, and returns the schedule.
  """
  createNewSchedule(main_schedule: ScheduleInput!): Schedule

  """
  Takes in schedule fields, finds the schedule record in the database corresponding to the provided ID, updates the record, and returns the updated schedule.
  """
  editExistingSchedule(id: ID!, main_schedule: ScheduleInput!): Schedule

  """
  For the schedule specified by the ID, modifies the courses field and returns the updated schedule.
  """
  setSelectedClasses(id: ID!, courses: [SelectedCourseInput!]!): Schedule
}

type Grade {
  average: Float
  distribution: [GradeDistributionItem]
}

type GradeDistributionItem {
  letter: String!
  count: Int!
}

"""
Info shared between Classes within and across semesters.
"""
type Course {
  classes(term: TermInput): [Class]!
  crossListing: [Course]
  sections(term: TermInput, primary: Boolean): [Section]!
  description: String!
  fromDate: String!
  gradeAverage: Float
  gradingBasis: String!
  level: String!
  number: String!
  prereqs: String
  subject: String!
  subjectName: String!
  title: String!
  toDate: String!
  raw: JSONObject!
  lastUpdated: ISODate!
}

"""
Data for a specific class in a specific semester. There may be more than one Class for a given Course in a given semester.
"""
type Class {
  course: Course!
  primarySection: Section!
  sections: [Section]!
  description: String
  enrollCount: Int!
  enrollMax: Int!
  number: String!
  semester: Semester!
  session: String!
  status: String!
  title: String
  unitsMax: Float!
  unitsMin: Float!
  waitlistCount: Int!
  waitlistMax: Int!
  year: Int!
  raw: JSONObject!
  lastUpdated: ISODate!
}

"""
Sections are each associated with one Class.
"""
type Section {
  class: Class!
  course: Course!
  enrollmentHistory: [EnrollmentDay]
  ccn: Int!
  dateEnd: String
  dateStart: String
  days: [Boolean!]
  enrollCount: Int!
  enrollMax: Int!
  instructors: [Instructor]
  kind: String!
  location: String
  notes: String
  number: String!
  primary: Boolean!
  timeEnd: String
  timeStart: String
  waitlistCount: Int!
  waitlistMax: Int!
  raw: JSONObject!
  lastUpdated: ISODate!
}

type Instructor {
  familyName: String!
  givenName: String!
}

type EnrollmentDay {
  enrollCount: Int!
  enrollMax: Int!
  waitlistCount: Int!
  waitlistMax: Int!
}

type CatalogItem {
  subject: String!
  number: String!
  title: String!
  classes: [CatalogClass]!
  gradeAverage: Float
  lastUpdated: ISODate!
}

type CatalogClass {
  number: String!
  title: String
  enrollCount: Int!
  enrollMax: Int!
  gradingBasis: String!
  level: String!
  waitlistCount: Int!
  waitlistMax: Int!
  unitsMax: Float!
  unitsMin: Float!
  lastUpdated: ISODate!
  primarySection: Section!
}

type CourseListItem {
  subject: String!
  number: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
ISODate custom scalar type
"""
scalar ISODate

"""
The combination of year and season that corresponds to a specific term. Both year and season/semester are required.
"""
input TermInput {
  year: Int!
  semester: Semester!
}

enum Semester {
  Fall
  Spring
  Summer
}

type TermOutput {
  year: Int!
  semester: String!
}

input CustomEventInput {
  start_time: String!
  end_time: String!
  title: String
  location: String
  description: String
  days_of_week: String
}

input SelectedCourseInput {
  class_ID: String!
  primary_section_ID: String
  secondary_section_IDs: [String!]
}

input ScheduleInput {
  name: String
  created_by: String!
  courses: [SelectedCourseInput!]
  is_public: Boolean
  term: TermInput!
  custom_events: [CustomEventInput!]
}

type Schedule {
  """
  The ObjectID associated with the schedule record
  """
  _id: ID

  """
  The name of the schedule, such as "Oski's Fall schedule <3"
  """
  name: String

  """
  Identifier (probably email) for the user who created the schedule (such as oski@bereley.edu).
  """
  created_by: String!

  """
  Term corresponding to the schedule, such as "Fall 1986"
  """
  term: TermOutput!

  """
  Whether the user would like the schedule to be viewable by others.
  """
  is_public: Boolean!

  """
  Courses, see the SelectedCourse type below
  """
  courses: [SelectedCourse!]

  """
  Custom events, such as club meetings, that the user has added to their schedule.
  """
  custom_events: [CustomEvent!]
  created: String!
  revised: String!
}

type SelectedCourse {
  """
  Identifiers (probably cs-course-ids) for the classes the user has added to their schedule.
  """
  class_ID: String!

  """
  Identifiers (probably the "003" in "2022 Spring STAT 97 003") for the primary sections (typically lectures) the user has added to their schedule.
  """
  primary_section_ID: String

  """
  Identifiers (probably the "103" in "103 DIS") for the secondary sections (typically discussions) the user has added to their schedule.
  """
  secondary_section_IDs: [String!]
}

type CustomEvent {
  start_time: String!
  end_time: String!
  title: String
  location: String
  description: String
  days_of_week: String
}
