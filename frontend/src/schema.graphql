type BerkeleytimeUserType {
  id: ID!
  user: UserType!
  major: String!
  savedClasses: [CourseType]
  emailClassUpdate: Boolean!
  emailGradeUpdate: Boolean!
  emailEnrollmentOpening: Boolean!
  emailBerkeleytimeUpdate: Boolean!
  schedules(before: String, after: String, first: Int, last: Int): ScheduleTypeConnection!
}

type CourseType implements Node {
  """The ID of the object."""
  id: ID!
  title: String!
  department: String!
  abbreviation: String!
  courseNumber: String!
  description: String!
  units: String
  crossListing(before: String, after: String, first: Int, last: Int, title: String, department: String, abbreviation: String, courseNumber: String, description: String, units: String, crossListing: [ID], prerequisites: String, gradeAverage: Float, letterAverage: String, hasEnrollment: Boolean, enrolled: Int, enrolledMax: Int, enrolledPercentage: Float, waitlisted: Int, openSeats: Int, lastUpdated: DateTime, hasGrades: Boolean, inPlaylists: String, idIn: String): CourseTypeConnection!
  prerequisites: String!
  gradeAverage: Float
  letterAverage: String!
  hasEnrollment: Boolean!
  enrolled: Int!
  enrolledMax: Int!
  enrolledPercentage: Float!
  waitlisted: Int!
  openSeats: Int!
  lastUpdated: DateTime!
  sectionSet(before: String, after: String, first: Int, last: Int, course: ID, abbreviation: String, courseNumber: String, year: String, semester: String, courseTitle: String, sectionNumber: String, ccn: String, kind: String, isPrimary: Boolean, associatedSections: [ID], days: String, startTime: DateTime, endTime: DateTime, finalDay: String, finalEnd: DateTime, finalStart: DateTime, instructor: String, disabled: Boolean, locationName: String, instructionMode: String, lastUpdated: DateTime, enrolled: Int, enrolledMax: Int, waitlisted: Int, waitlistedMax: Int): SectionTypeConnection!
  gradeSet(before: String, after: String, first: Int, last: Int, course: ID, semester: String, year: String, abbreviation: String, courseNumber: String, sectionNumber: String, instructor: String, gradedTotal: Int, average: Float): GradeTypeConnection!
  playlistSet(before: String, after: String, first: Int, last: Int, category: String, name: String, semester: String, year: String, courses: [ID]): PlaylistTypeConnection!
  berkeleytimeuserSet: [BerkeleytimeUserType!]!
  schedulerSections(before: String, after: String, first: Int, last: Int): SectionSelectionTypeConnection!
}

type CourseTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CourseTypeEdge]!
}

"""A Relay edge containing a `CourseType` and its cursor."""
type CourseTypeEdge {
  """The item at the end of the edge"""
  node: CourseType

  """A cursor for use in pagination"""
  cursor: String!
}

type CreateSchedule {
  schedule: ScheduleType
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeleteUser {
  success: Boolean
}

"""
Proxy for enrollment object. Using this instead of
a DjangoObjectType gives us higher flexibility of the data. 
"""
type EnrollmentData {
  day: Int
  dateCreated: Date
  enrolled: Int
  enrolledMax: Int
  enrolledPercent: Float
  waitlisted: Int
  waitlistedMax: Int
  waitlistedPercent: Float
}

"""The return format of both queries """
type EnrollmentInfo {
  course: CourseType
  section: [SectionType]
  telebears: TelebearData
  data: [EnrollmentData]
  enrolledMax: Int
  enrolledPercentMax: Float
  enrolledScaleMax: Int
  waitlistedMax: Int
  waitlistedPercentMax: Float
  waitlistedScaleMax: Int
}

type FormConfigType {
  field: JSONString
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type GradeType implements Node {
  """The ID of the object."""
  id: ID!
  course: CourseType!
  semester: String!
  year: String!
  abbreviation: String!
  courseNumber: String!
  sectionNumber: String!
  instructor: String!
  instructors: [String!]!
  gradedTotal: Int!
  average: Float!
  distribution: [LetterGradeType]
  sectionGpa: Float
  sectionLetter: String
  denominator: Int
}

type GradeTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [GradeTypeEdge]!
}

"""A Relay edge containing a `GradeType` and its cursor."""
type GradeTypeEdge {
  """The item at the end of the edge"""
  node: GradeType

  """A cursor for use in pagination"""
  cursor: String!
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type LetterGradeType {
  letter: String
  numerator: Int
  percent: Float
  percentileHigh: Float
  percentileLow: Float
}

type Logout {
  success: Boolean
}

type Mutation {
  createSchedule(name: String, selectedSections: [SectionSelectionInput], semester: String, timeblocks: [TimeBlockInput], year: String): CreateSchedule
  updateSchedule(name: String, scheduleId: ID, selectedSections: [SectionSelectionInput], timeblocks: [TimeBlockInput]): UpdateSchedule
  removeSchedule(scheduleId: ID): RemoveSchedule
  updateUser(emailBerkeleytimeUpdate: Boolean, emailClassUpdate: Boolean, emailEnrollmentOpening: Boolean, emailGradeUpdate: Boolean, major: String): UpdateUser
  saveClass(classId: ID): SaveClass
  removeClass(classId: ID): RemoveClass

  """Login mutation using graphql_jwt """
  login(tokenId: String): ObtainJSONWebToken
  logout: Logout
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
  deleteUser: DeleteUser
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""Login mutation using graphql_jwt """
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  user: BerkeleytimeUserType
  newUser: Boolean
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PlaylistType implements Node {
  """The ID of the object."""
  id: ID!
  category: String!
  name: String!
  semester: String!
  year: String!
  courses(before: String, after: String, first: Int, last: Int, title: String, department: String, abbreviation: String, courseNumber: String, description: String, units: String, crossListing: [ID], prerequisites: String, gradeAverage: Float, letterAverage: String, hasEnrollment: Boolean, enrolled: Int, enrolledMax: Int, enrolledPercentage: Float, waitlisted: Int, openSeats: Int, lastUpdated: DateTime, hasGrades: Boolean, inPlaylists: String, idIn: String): CourseTypeConnection!
}

type PlaylistTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PlaylistTypeEdge]!
}

"""A Relay edge containing a `PlaylistType` and its cursor."""
type PlaylistTypeEdge {
  """The item at the end of the edge"""
  node: PlaylistType

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  schedules: [ScheduleType]
  schedule(id: ID): ScheduleType
  user: BerkeleytimeUserType
  allPlaylists(before: String, after: String, first: Int, last: Int, category: String, name: String, semester: String, year: String, courses: [ID]): PlaylistTypeConnection

  """The ID of the object"""
  playlist(id: ID!): PlaylistType
  allGrades(before: String, after: String, first: Int, last: Int, course: ID, semester: String, year: String, abbreviation: String, courseNumber: String, sectionNumber: String, instructor: String, gradedTotal: Int, average: Float): GradeTypeConnection

  """The ID of the object"""
  grade(id: ID!): GradeType
  formConfig: FormConfigType
  courseEnrollmentBySection(sectionId: ID): EnrollmentInfo
  courseEnrollmentBySemester(courseId: ID, semester: String, year: Int): EnrollmentInfo

  """The ID of the object"""
  course(id: ID!): CourseType
  allCourses(before: String, after: String, first: Int, last: Int, title: String, department: String, abbreviation: String, courseNumber: String, description: String, units: String, crossListing: [ID], prerequisites: String, gradeAverage: Float, letterAverage: String, hasEnrollment: Boolean, enrolled: Int, enrolledMax: Int, enrolledPercentage: Float, waitlisted: Int, openSeats: Int, lastUpdated: DateTime, hasGrades: Boolean, inPlaylists: String, idIn: String): CourseTypeConnection

  """The ID of the object"""
  section(id: ID!): SectionType
  allSections(before: String, after: String, first: Int, last: Int, course: ID, abbreviation: String, courseNumber: String, year: String, semester: String, courseTitle: String, sectionNumber: String, ccn: String, kind: String, isPrimary: Boolean, associatedSections: [ID], days: String, startTime: DateTime, endTime: DateTime, finalDay: String, finalEnd: DateTime, finalStart: DateTime, instructor: String, disabled: Boolean, locationName: String, instructionMode: String, lastUpdated: DateTime, enrolled: Int, enrolledMax: Int, waitlisted: Int, waitlistedMax: Int): SectionTypeConnection
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
}

type RemoveClass {
  user: BerkeleytimeUserType
}

type RemoveSchedule {
  schedule: ScheduleType
}

type SaveClass {
  user: BerkeleytimeUserType
}

type ScheduleType implements Node {
  """The ID of the object."""
  id: ID!
  user: BerkeleytimeUserType!
  name: String!
  year: String!
  semester: String!
  dateCreated: DateTime!
  dateModified: DateTime!
  totalUnits: Int!
  selectedSections(before: String, after: String, first: Int, last: Int): SectionSelectionTypeConnection!
  timeblocks(before: String, after: String, first: Int, last: Int): TimeBlockTypeConnection!
}

type ScheduleTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ScheduleTypeEdge]!
}

"""A Relay edge containing a `ScheduleType` and its cursor."""
type ScheduleTypeEdge {
  """The item at the end of the edge"""
  node: ScheduleType

  """A cursor for use in pagination"""
  cursor: String!
}

input SectionSelectionInput {
  course: ID!
  primary: ID
  secondary: [ID]
}

type SectionSelectionType implements Node {
  """The ID of the object."""
  id: ID!
  schedule: ScheduleType!
  course: CourseType!
  primary: SectionType
  secondary(before: String, after: String, first: Int, last: Int, course: ID, abbreviation: String, courseNumber: String, year: String, semester: String, courseTitle: String, sectionNumber: String, ccn: String, kind: String, isPrimary: Boolean, associatedSections: [ID], days: String, startTime: DateTime, endTime: DateTime, finalDay: String, finalEnd: DateTime, finalStart: DateTime, instructor: String, disabled: Boolean, locationName: String, instructionMode: String, lastUpdated: DateTime, enrolled: Int, enrolledMax: Int, waitlisted: Int, waitlistedMax: Int): SectionTypeConnection!
}

type SectionSelectionTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SectionSelectionTypeEdge]!
}

"""A Relay edge containing a `SectionSelectionType` and its cursor."""
type SectionSelectionTypeEdge {
  """The item at the end of the edge"""
  node: SectionSelectionType

  """A cursor for use in pagination"""
  cursor: String!
}

type SectionType implements Node {
  """The ID of the object."""
  id: ID!
  course: CourseType!
  abbreviation: String!
  courseNumber: String!
  year: String!
  semester: String!
  courseTitle: String!
  sectionNumber: String!
  ccn: String!
  kind: String!
  isPrimary: Boolean!
  associatedSections(before: String, after: String, first: Int, last: Int, course: ID, abbreviation: String, courseNumber: String, year: String, semester: String, courseTitle: String, sectionNumber: String, ccn: String, kind: String, isPrimary: Boolean, associatedSections: [ID], days: String, startTime: DateTime, endTime: DateTime, finalDay: String, finalEnd: DateTime, finalStart: DateTime, instructor: String, disabled: Boolean, locationName: String, instructionMode: String, lastUpdated: DateTime, enrolled: Int, enrolledMax: Int, waitlisted: Int, waitlistedMax: Int): SectionTypeConnection!
  days: String!
  startTime: DateTime
  endTime: DateTime
  finalDay: String!
  finalEnd: DateTime
  finalStart: DateTime
  instructor: String!
  disabled: Boolean!
  locationName: String!
  instructionMode: String!
  lastUpdated: DateTime!
  enrolled: Int
  enrolledMax: Int
  waitlisted: Int
  waitlistedMax: Int
  schedulerPrimarySections(before: String, after: String, first: Int, last: Int): SectionSelectionTypeConnection!
  schedulerSecondarySections(before: String, after: String, first: Int, last: Int): SectionSelectionTypeConnection!
  wordDays: String
}

type SectionTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SectionTypeEdge]!
}

"""A Relay edge containing a `SectionType` and its cursor."""
type SectionTypeEdge {
  """The item at the end of the edge"""
  node: SectionType

  """A cursor for use in pagination"""
  cursor: String!
}

"""Telebears JSON """
type TelebearData {
  phase1Start: Date
  phase1End: Date
  phase2Start: Date
  phase2End: Date
  adjStart: Date
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

input TimeBlockInput {
  name: String!
  startTime: Time!
  endTime: Time!
  days: String!
}

type TimeBlockType implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time!
  days: String!
  schedule: ScheduleType!
}

type TimeBlockTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TimeBlockTypeEdge]!
}

"""A Relay edge containing a `TimeBlockType` and its cursor."""
type TimeBlockTypeEdge {
  """The item at the end of the edge"""
  node: TimeBlockType

  """A cursor for use in pagination"""
  cursor: String!
}

type UpdateSchedule {
  schedule: ScheduleType
}

type UpdateUser {
  user: BerkeleytimeUserType
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  berkeleytimeuser: BerkeleytimeUserType
}

type Verify {
  payload: GenericScalar!
}

